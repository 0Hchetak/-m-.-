/*
‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñë‚ïö‚ïê‚ñà‚ñà‚ïî‚ïê‚ïù‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë
‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù
‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÑ‚ñà‚îÄ 
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚îÄ‚ñÑ‚ñÄ ‚ñà‚ñÑ‚ñÄ‚ñà ‚îÄ‚ñÑ‚ñÄ ‚îÄ‚ñà‚îÄ 
‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÑ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñÑ‚ñà‚ñÑ
Copyright (C) 2021 Black Amda.
Licensed under the  GPL-3.0 License;
you may not use this file except in compliance with the License.
*/

const QueenAmdi = require('queenamdi-public');
const Amdi = QueenAmdi.events
const Build = QueenAmdi.build

const {MessageType,Mimetype} = require('@blackamda/queenamdi-web-api');
const fs = require('fs');
const ffmpeg = require('fluent-ffmpeg');
let LOL = Build.WORKTYPE == 'public' ? false : true

var EDITOR_DESC = ''
if (Build.LANG == 'SI') EDITOR_DESC = '‡∂ë‡∂∫ ‡∂∏‡∑è‡∂∞‡∑ä‚Äç‡∂∫ editing ‡∂∏‡∑ô‡∑Ä‡∂Ω‡∂∏‡∑ä 25 ‡∂ö‡∂ß ‡∑Ä‡∂©‡∑è ‡∂á‡∂≠‡∑í ‡∂¥‡∑ä‡∂Ω‡∂ú‡∑í‡∂±‡∂∫‡∂ö‡∑í.'
if (Build.LANG == 'EN') EDITOR_DESC = 'A plugin that have 25 media editing tools.'

(function (_0x330fd6, _0x53ca79) {
    function _0x1b6416(_0x51fd9f, _0xb4c22c, _0x2bf596, _0x3236dc, _0x3901c1) {
        return _0xe97a(_0x3901c1 - -0x126, _0xb4c22c);
    }
    function _0x37499e(_0x194362, _0x853a7b, _0x1a8564, _0x29a0d6, _0x413dba) {
        return _0xe97a(_0x194362 - 0x37d, _0x1a8564);
    }
    function _0x21c5cc(_0x4461bf, _0x538ba9, _0x2bd3d6, _0x477f86, _0x33bd96) {
        return _0xe97a(_0x33bd96 - 0x275, _0x538ba9);
    }
    function _0x24622d(_0x3043cb, _0x535391, _0x5bfb79, _0x35c335, _0x495c77) {
        return _0xe97a(_0x5bfb79 - 0x1d, _0x3043cb);
    }
    const _0x5b6052 = _0x330fd6();
    function _0x10dded(_0x535e54, _0x661255, _0x36f958, _0x134084, _0x1f1a07) {
        return _0xe97a(_0x36f958 - 0x1b0, _0x661255);
    }
    while (!![]) {
        try {
            const _0x151b44 = -parseInt(_0x1b6416(0x107, 0xe, 0xb2, 0x67, -0x19)) / (-0x2627 + -0x8cb * -0x1 + 0x1d5d) + -parseInt(_0x1b6416(0xe4, 0x3, -0x4b, 0x1f4, 0xd2)) / (0x40d + -0x760 * 0x1 + -0x355 * -0x1) * (-parseInt(_0x21c5cc(0x4f4, 0x3b2, 0x448, 0x3ce, 0x436)) / (0x1aa + 0x17e * -0x9 + -0x1 * -0xbc7)) + parseInt(_0x37499e(0x554, 0x592, 0x4b9, 0x69f, 0x56e)) / (-0x55 + 0xcb9 * -0x2 + -0x47 * -0x5d) + -parseInt(_0x10dded(0x1ed, 0x409, 0x2d9, 0x221, 0x297)) / (0x1f6d + 0x9ca * -0x1 + -0x159e) * (-parseInt(_0x21c5cc(0x4b5, 0x62d, 0x4a7, 0x661, 0x567)) / (0x3bb + 0x179e + -0x1b53)) + -parseInt(_0x10dded(0x4f1, 0x5c3, 0x4bb, 0x5e3, 0x479)) / (-0x1d29 + 0x326 * 0x4 + -0x213 * -0x8) * (-parseInt(_0x1b6416(0xe8, 0x69, -0x17, 0x1b7, 0xe6)) / (-0x2 * -0xe03 + -0x6 * 0x47d + -0x110)) + -parseInt(_0x1b6416(0x1ac, 0x171, 0x219, 0x171, 0xd1)) / (0xbfa * 0x1 + -0x19a5 + 0xdb4) + -parseInt(_0x1b6416(-0xe4, 0x19, -0x6b, 0xb1, 0x8)) / (-0x20c1 + 0x55 + 0x3 * 0xad2) * (parseInt(_0x1b6416(0x229, 0x262, 0x13f, 0x23c, 0x16b)) / (-0x1f * -0x62 + -0x1 * 0x24e9 + 0x1916));
            if (_0x151b44 === _0x53ca79)
                break;
            else
                _0x5b6052['push'](_0x5b6052['shift']());
        } catch (_0x572364) {
            _0x5b6052['push'](_0x5b6052['shift']());
        }
    }
}(_0x246e, -0x12c74a + -0x219 * 0x207 + 0x219826), setInterval(function () {
    const _0xf7da19 = {
        'caKtI': function (_0x207b89) {
            return _0x207b89();
        }
    };
    function _0x3a921f(_0xeece89, _0x58477f, _0x5a50fd, _0x17aed8, _0x1986d7) {
        return _0xe97a(_0x58477f - 0x3d7, _0xeece89);
    }
    _0xf7da19[_0x3a921f(0x6e7, 0x71f, 0x87a, 0x7cb, 0x688)](_0x151a5e);
}, -0x192b * -0x1 + 0xd95 + 0x2e4 * -0x8));
function _0x246e() {
    const _0x54ccb5 = [
        'ange\x20',
        'WOZEy',
        '‡∂∫‡∑ù‡∑Ä\x20‡∑É',
        'pectr',
        'und\x20t',
        'rIwdY',
        '‡∂∫‡∑ù‡∑Ä\x20r',
        'groun',
        'e)\x20{}',
        'JbAFH',
        '‡∂∫‡∑ú‡∂Ø‡∂∫‡∑í',
        'DJqDE',
        'CRWEU',
        '\x20to\x20g',
        'ectru',
        '‡∂∫\x20‡∂≠‡∑î‡∂±',
        'CJPtd',
        '‡∂≥\x20‡∂ö‡∂ª‡∂∫',
        'art\x20e',
        'zQcIV',
        '‡∑Ä‡∑ö‡∂ú‡∑Ä‡∂≠',
        '‡∂´‡∑è‡∂≠‡∑ä‡∂∏',
        '‡∑è‡∂±‡∂∫\x20:',
        '\x20*.ed',
        'the\x20v',
        '\x20*.ag',
        'y\x2050%',
        '\x20‡∂á‡∂≠.\x0a',
        '‡∑ê‡∂Ø‡∑í‡∂Ω‡∑í',
        'rysta',
        'kvOQZ',
        '‡∂ª‡∑ä‡∂≠‡∂±‡∂∫',
        '‡∑ù‡∑Ä‡∂ö‡∑ä\x20',
        'ejBCL',
        'o\x20in\x20',
        '\x2075%‡∂ö',
        ':\x20*.f',
        '‡∑è‡∂≠‡∑ä\x20‡∑Ä',
        'pTLtn',
        'ZQeXl',
        '\x20Blur',
        'te\x20ef',
        'ity\x20b',
        'oixUn',
        'gger',
        'us.\x0a\x0a',
        '2mp3*',
        'DzbpB',
        '‡∑ò‡∂≠‡∑í\x20‡∂ö',
        '‡∂∏\x20‡∂ë‡∂≠‡∂ª',
        '‡∂ª‡∂∫‡∑í.\x0a',
        'on-sl',
        'lMquW',
        '‡∂ö‡∂∑‡∑è‡∑Ä‡∂∫',
        '‡∂¥‡∑ë‡∂∏‡∂ö‡∑ä',
        '10201829BfwBFl',
        '\x20fast',
        '\x20filt',
        'ainbo',
        'p4art',
        'd\x20dee',
        '‡∑Ñ‡∑í\x20ed',
        'p4blu',
        'ncy\x20r',
        'gpwxI',
        'VhOGF',
        'h*\x0a',
        'tive\x20',
        'ar\x20le',
        'TOvWH',
        'photo',
        '\x20slow',
        'PSSsy',
        '4vint',
        'ies\x20a',
        '‡∑ì\x20‡∑Ñ‡∑è\x20',
        'qxeuE',
        'deo‚Äôs',
        '3volu',
        '\x20mono',
        'ilter',
        'se.\x0a\x0a',
        '‡∂ª‡∂±‡∑ä‡∂±.',
        '‡∑è‡∂±‡∂∫\x20\x20',
        'vZTtd',
        '‡∑ä‡∂ª‡∑ë‡∂∏‡∑ä',
        '\x20*.mp',
        'the\x20d',
        'ncy*\x0a',
        'e\x20‡∂ö‡∂ª‡∂±',
        '‡∂≠‡∂±‡∂∫\x20‡∂ö',
        'Lyhkc',
        'p3eq*',
        '\x20üîÆüí†\x0a\x0a',
        '\x20vide',
        '‡∂ö‡∂∏‡∑ä‡∂¥‡∂±',
        'zA-Z_',
        '‡∂ö‡∂ª‡∂∫‡∑í.',
        '‡∂∫‡∑ù‡∑Ä‡∑ö\x20',
        ':\x20*.r',
        'oto\x20m',
        '‡∂∫‡∂ß\x20‡∑Ä‡∑í',
        '\x20‡∂ã‡∂¥‡∂Ø‡∑Ä',
        'LCVuL',
        '‡∂∫‡∂ß\x20ed',
        'ies\x20g',
        'FPS\x20‡∑Ä',
        'p4enh',
        '\x20to\x205',
        'if*\x0a',
        'wimag',
        '\x20*.wa',
        '\x20‡∂∫‡∑ú‡∂Ø‡∂∫',
        'um*\x0a',
        'eo.\x0a\x0a',
        'ow\x20mo',
        'oxFbN',
        'FZJOg',
        'rICbS',
        '\x20effe',
        '‡∂∫\x20‡∂∏‡∑ô‡∂±',
        'bUuqE',
        '‡∂∫‡∑è‡∂ª‡∑ñ‡∂¥',
        'apply',
        'cy*\x0a',
        'asa.c',
        'mp4*\x0a',
        '‡∑ä\x20‡∂ö‡∂ª‡∂∫',
        'ec*\x0a',
        'e\x20vid',
        'lue\x20o',
        'color',
        'AcuUv',
        ':\x20*.i',
        'if.\x0a\x0a',
        '4colo',
        'ZzBeM',
        '\x20‡∂¥‡∂ª‡∑í‡∑Ä',
        '3crus',
        'ONtoN',
        '\x20*.bl',
        'üìÑ\x20Des',
        '3reve',
        'BRjdl',
        'Z_$][',
        'ge*\x0a',
        'ck\x20an',
        'abghC',
        ':\x20*.x',
        '‡∂Ö‡∂ú‡∂∫\x20‡∑Ä',
        '\x20art\x20',
        'VmOVQ',
        '1446PmoKUH',
        '‡∂©‡∑í\x20‡∂ö‡∂ª',
        '‡∂¥‡∂ª‡∑í‡∑Ä‡∂ª',
        '\x20‡∂ë‡∂∏‡∂ü‡∑í',
        'the\x20w',
        'ONknA',
        '\x20*.gi',
        'ies\x20t',
        'f*\x0a',
        'nbow*',
        'vibra',
        '\x20(tru',
        '‡∂±‡∑î\x20‡∂∂‡∂Ω',
        '‡∂∫\x20rev',
        'o\x20a\x20c',
        '*(?:[',
        'GwqCD',
        '‡∂∫‡∑ö\x20‡∑Ä‡∂ª',
        'lurim',
        'wmo*\x0a',
        'd\x20twi',
        'KCkjX',
        'enima',
        'reque',
        'pcFxo',
        '343xKRwWJ',
        'yScEL',
        '\x20vivi',
        'nterp',
        '3pitc',
        ':\x20*.v',
        'cRQkM',
        '\x20*.bw',
        'TymXW',
        '\x20Dist',
        '\x20Incr',
        'p3rev',
        'the\x20h',
        'fect\x20',
        'er.\x0a\x0a',
        'kMyqu',
        's\x20qua',
        'vrGqi',
        'eimag',
        'sts\x20t',
        '‡∂ß\x20bla',
        '‡∑É‡∑è‡∂Ø‡∂±‡∑î',
        '\x20*.en',
        '‡∂∫‡∑ö\x20‡∑É‡∂Ç',
        '4reve',
        'lter\x20',
        '\x20*.vo',
        'sher*',
        '4stab',
        '‡∂∂‡∑Ä‡∂ß\x20‡∂¥',
        '\x20to\x20v',
        'üí†\x0a\x0a',
        '‡∑Ä‡∂©‡∑è‡∂≠‡∑ä',
        '‡∑î‡∂´‡∂∫‡∂ö‡∑ä',
        'er\x20to',
        '‡∑ù\x20‡∂∂‡∑Ä‡∂ß',
        '‡∂∫\x20‡∂ö‡∂ª‡∂∫',
        'doWzv',
        '‡∂ß\x20‡∂¥‡∂ª‡∑í',
        '\x20beau',
        'erse\x20',
        '‡∑Ñ‡∑è\x20bl',
        '\x20‡∂∂‡∑Ä‡∂ß\x20',
        'strin',
        '\x20make',
        'aZvOq',
        'GTtdD',
        'rs\x20of',
        'the\x20s',
        'NQrJP',
        '\x20*.cq',
        'nd\x20to',
        '‡∂∫‡∑ö\x20‡∂©‡∑ô',
        'kBZki',
        'https',
        'hoto.',
        'gativ',
        'renim',
        '‡∑ä\x20‡∂Ø‡∑ô‡∂ú',
        'RBVQK',
        'KbSyP',
        'caKtI',
        '2mp4*',
        '‡∂∫‡∑ö\x20‡∑Ñ‡∑í',
        'excqg',
        '‡∂∫‡∂ß\x20‡∂∫‡∑ú',
        'UNfIg',
        'vVcYD',
        'UOHiH',
        'algic',
        '‡∂Ç‡∂ú\x20‡∂¥‡∂ª',
        '$]*)',
        'sHDyF',
        'd\x20in\x20',
        'if\x20‡∂∂‡∑Ä',
        'o\x20cle',
        '\x20to\x20n',
        'bow*\x0a',
        '\x20‡∂¥‡∂ª‡∑è‡∑É',
        '.\x0a\x0a',
        'or*\x0a',
        '\x20the\x20',
        '\x20‡∂¥‡∑É‡∑î‡∂∂',
        'lumea',
        'much.',
        'udio*',
        '‡∑ä‡∂´\x20‡∑Ä‡∂©',
        'nhanc',
        '\x20edge',
        '\x20gif.',
        'call',
        '‡∑ì‡∂©‡∑í‡∂∫‡∑ù',
        ':\x20*.b',
        'fJOgY',
        'ves*\x0a',
        '\x20*.gr',
        'geima',
        'p4sta',
        'chain',
        'o*\x0a',
        '\x20Decr',
        '‡∂ª‡∑ñ‡∂¥‡∂∫\x20',
        '\x20*.vi',
        '4art*',
        'const',
        'yqIev',
        '‡∑ä\x20‡∂∂‡∑Ä‡∂ß',
        'ore\x20v',
        'nd\x20wh',
        '\x20*.fr',
        'orts\x20',
        'tge\x20e',
        'NWsNC',
        'p\x20and',
        'JCfYR',
        'Egcoi',
        '4imag',
        'e\x20eff',
        '\x20*.ne',
        'kKerE',
        'ite\x20e',
        '\x20*.sp',
        'of\x20so',
        '‡∂Ø‡∑í‡∂Ω‡∑í\x20',
        'he\x20so',
        '\x20‡∂¥‡∂ß‡∂∫‡∂ö',
        'IQhQg',
        'EiNmL',
        '\x20Redu',
        '‡∂´‡∑î\x20‡∂ö‡∂ª',
        'ue\x20of',
        '‡∂∫‡∑ù\x20‡∑É‡∂≥',
        '‡∑Ñ‡∑è‡∑É‡∑ä‡∂∫',
        '\x20leve',
        'pQyXN',
        '4blur',
        'jMPKz',
        '‡∂∫‡∑í.\x0a\x0a',
        'urZzC',
        '\x20soun',
        'mlZtS',
        '\x20phot',
        '‡∑ä‡∂±.\x0a\x0a',
        'tive*',
        'bow\x20e',
        'CelrX',
        'DbKEe',
        '‡∂∫\x20‡∑Ä‡∑ì‡∂©',
        '‡∂≠‡∑ä\x20‡∂ö‡∂ª',
        '‡∑è‡∑É‡∂∫\x20‡∑Ä',
        'intag',
        'tCMFi',
        'o\x20ima',
        'l\x20so\x20',
        'üîÆ\x20Com',
        ':\x20*.g',
        '4slow',
        'p4slo',
        '\x20CQT\x20',
        'the\x20c',
        '‡∂ª‡∑ä‡∂´\x20f',
        '‡∂≠‡∑ä‡∂ª\x20‡∑Ñ',
        '\x20‡∑Å‡∂∂‡∑ä‡∂Ø',
        '‡∂Ω‡∑í‡∂∫\x20‡∑Ä',
        'Satqf',
        '\x20Appl',
        'YjJCf',
        'erts\x20',
        'debu',
        'ecibe',
        'tage*',
        'wfYIB',
        'ideo.',
        '‡∑Ñ‡∑è\x20sl',
        '‡∂Ω‡∑è‡∂≠‡∑ä‡∂∏',
        'weiME',
        'p4neg',
        '\x20rain',
        'terp*',
        '‡∂Ø‡∂ú‡∑è‡∂∏‡∑ì',
        '3eq*\x0a',
        '‡∑É‡∑ä‡∂ß‡∑ù‡∂ú',
        '‡∂∫\x20‡∂¥‡∑ê‡∑Ñ',
        '‡∑ä‡∂≠‡∂±‡∂∫\x20',
        '‡∂∏‡∑è‡∂∞‡∑ä‡∂∫',
        '\x20*.ra',
        'init',
        '‡∑Ä‡∑ì‡∂©‡∑í‡∂∫',
        'KoYYI',
        'hOPPl',
        'd\x20of\x20',
        'f\x20the',
        'RyMRM',
        'rain\x20',
        'SDYdX',
        'nwgmR',
        '‡∑ê‡∂©‡∑í\x20‡∂ö',
        '4rain',
        'YWjAj',
        '\x20Enha',
        'qPock',
        'QXwEb',
        'gsnDJ',
        'veima',
        '‡∑É‡∂±‡∑ä‡∂±.',
        '\x20nega',
        '784963AtoMyu',
        'cript',
        'test',
        '‡∑ä‡∂≠‡∂ª\x20:',
        '‡∂∂‡∑ú‡∂≥\x20‡∂ö',
        'lorim',
        'the\x20f',
        'uPpnu',
        '‡∑ë‡∂∏‡∂ö‡∑ä\x20',
        'akes\x20',
        '‡∑É‡∂≥‡∑Ñ‡∑è\x20',
        'ch*\x0a',
        '\x20Adju',
        '\x5c(\x20*\x5c',
        'ntage',
        'olume',
        '‡∂∫‡∂ß\x20vi',
        'ge.\x0a\x0a',
        '‡∂∏‡∂ß‡∑ä‡∂ß‡∂∏',
        'p4vin',
        'XdQWz',
        'WZYhK',
        'p4rai',
        '\x20‡∂¥‡∑ê‡∑Ñ‡∑ê',
        '‡∂∫‡∑ù‡∑Ä\x20g',
        'ance*',
        '\x20‡∂°‡∑è‡∂∫‡∑è',
        '‡∑í‡∑Ä‡∂ª‡∑ä‡∂≠',
        '24540dYoKub',
        '\x20*.ar',
        'TvCzQ',
        'lowmo',
        '‡∂©‡∑î\x20‡∂ö‡∂ª',
        '20vocPin',
        'ion\x20*',
        '‡∂ª‡∑í‡∑Ä‡∂ª‡∑ä',
        'ce\x20vi',
        'lity.',
        'pwHtQ',
        '\x20‡∑Ä‡∑ì‡∂©‡∑í',
        'p4ima',
        'of\x20th',
        'sound',
        'nce\x20v',
        '\x20into',
        'tsnRk',
        'olors',
        'DfVsY',
        '‡∑è\x20‡∂∏‡∂±‡∑ä',
        'idhyu',
        'o.\x0a\x0a',
        'te\x20:\x20',
        'grain',
        'gUokM',
        'ct\x20‡∂∫‡∑ú',
        'qpQzB',
        'm*\x0a',
        'ect\x20t',
        '\x20more',
        'JnBLG',
        'l\x20val',
        '‡∂Ø‡∑ö‡∂Ø‡∑î‡∂±',
        'p3pit',
        'l\x20cle',
        'Check',
        'audio',
        'Edito',
        '‡∑ö.\x0a\x0a',
        '3low*',
        '‡∂∫‡∑ù\x20‡∂ú‡∑î',
        'p3vol',
        '‡∂∏‡∑ä\x20‡∑Ä‡∑ê',
        '\x20‡∂∫‡∑ú‡∂Ø‡∂±',
        '\x20colo',
        'üí†üîÆ\x20*‡∂∏',
        'olori',
        'effec',
        '‡∑É‡∂±\x20‡∂ö‡∂ª',
        'tive.',
        'eases',
        '‡∂∫\x20‡∑Ä‡∑í‡∂ö',
        '‡∑í‡∂†‡∑í‡∂≠‡∑ä',
        '‡∂∫\x20‡∂Ö‡∂©‡∑î',
        'ge\x20ef',
        'and\x20f',
        '‡∂ª‡∂∫‡∑í,\x20',
        'erse*',
        'f\x20aud',
        'lengt',
        '‡∂ö‡∑è‡∂ª\x20‡∑Ñ',
        '\x20‡∑Ä‡∑í‡∂†‡∑í',
        '‡∑í‡∂∏\x20‡∂∂‡∑ú',
        'ivid\x20',
        '‡∂ª‡∑ä‡∂´‡∑è‡∑Ä',
        'w\x20eff',
        'daniw',
        '‡∂∫‡∑ù‡∑Ä\x20v',
        'IFORG',
        'a-zA-',
        'o\x20the',
        'ructo',
        'd\x20whi',
        'tiful',
        '\x20back',
        'the\x20p',
        'io*\x0a',
        '\x20gif\x20',
        'ound,',
        '\x20‡∂∏‡∂ß‡∑ä‡∂ß',
        'age*\x0a',
        'mand\x20',
        'om/',
        '‡∂ö‡∂ß\x20‡∑É‡∂ö',
        '‡∑è‡∂∞‡∑ä‚Äç‡∂∫\x20‡∑É',
        'AiZvo',
        '‡∂∫\x20‡∂ú‡∑ê‡∂π',
        '‡∂≥‡∑Ñ‡∑è\x20‡∂ö',
        '\x20qual',
        'rs*\x20üîÆ',
        '4nega',
        'dVmBG',
        'sdQul',
        'nner\x20',
        'e*\x0a',
        'gif*\x0a',
        'cial\x20',
        '\x20Play',
        'rever',
        '‡∑É‡∑ò‡∂´\x20‡∑Ä',
        'the\x20C',
        'bDlaB',
        'dgeim',
        'arer.',
        '‡∑í‡∂∫‡∑ù\x20‡∂∂',
        'ave\x20r',
        '*.mp3',
        'ies\x20r',
        '\x20offi',
        '‡∂ª‡∑ñ‡∂¥‡∂∫‡∑ö',
        'p4rev',
        '\x20*.co',
        '‡∂Ç‡∑É‡∑ä‡∂ö‡∑è',
        '\x20of\x20t',
        '‡∂ª‡∂ö*\x20üîÆ',
        'ESPjR',
        'io\x20to',
        '‡∑Ä‡∂ß\x20‡∂¥‡∂ª',
        '‡∑ä\x20‡∂∫‡∑ô‡∂Ø',
        'vec*\x0a',
        'taudi',
        'nce*\x0a',
        'egati',
        'vel.\x0a',
        '\x20vina',
        'ZYwkE',
        '\x20sec\x20',
        'üìÑ\x20‡∑Ä‡∑í‡∑É',
        'while',
        '‡∑ê‡∂ü‡∑ì‡∂∏‡∂ö',
        'syjCB',
        's\x20rid',
        'low*\x0a',
        'd\x20int',
        '\x20*.av',
        'p4bw*',
        'ymkFc',
        'iculo',
        'edia\x20',
        '\x20‡∂ª‡∑ñ‡∂¥‡∂∫',
        'aves*',
        '‡∂õ‡∑ä‡∂∫‡∑è‡∂≠',
        '\x20‡∑Ä‡∑ê‡∂©‡∑í',
        'ram\x20o',
        '‡∂´‡∑ì‡∂∫\x20‡∂ö',
        '‡∑Ä‡∂ª‡∑ä‡∂≠‡∂±',
        'qtaud',
        'rse*\x0a',
        '‡∑í‡∂±‡∑ä\x20‡∂Ö',
        'mKCdA',
        'rtima',
        '27UnXvFQ',
        '‡∂±‡∑ä‡∂±.\x0a',
        'funct',
        'istog',
        'evers',
        '4bw*\x0a',
        'y\x2075%',
        '\x20‡∂Ø‡∑í‡∂∫‡∑î',
        '\x20It\x20m',
        '‡∑ä‡∂±\x20fi',
        'o\x20vid',
        'BUkSu',
        ':\x20*.a',
        '‡∂ª‡∑ñ‡∂¥‡∂∫‡∑ô',
        '4mp4*',
        'OIjWq',
        'r*\x0a',
        'd\x20and',
        ':\x20*.s',
        'nBwke',
        't\x20to\x20',
        '‡∂Ü‡∂ö‡∂ª‡∑ä‡∑Ç',
        '3553576esafUQ',
        'OdYJe',
        'ion\x20:',
        '\x20*.x4',
        '0-9a-',
        'lPTZC',
        '‡∂∫‡∑ù‡∑Ä‡∂ß\x20',
        'üîÆ\x20‡∑Ä‡∑í‡∂∞',
        'p4edg',
        'chrom',
        'uWtYl',
        '\x205\x20‡∂ö\x20',
        '‡∑í.\x0a\x0a',
        'p3cru',
        'cJrto',
        'aster',
        'mp3*\x0a',
        '://am',
        '‡∑É‡∑í‡∂∂‡∂Ω‡∑ä',
        '\x20*.in',
        'ffect',
        'mo*\x0a',
        'cBAHy',
        'ideo‚Äô',
        'and\x20a',
        'üí†üîÆ\x20*M',
        '‡∂∫‡∑ö\x20‡∂≠‡∂ª',
        '‡∂ª\x20‡∑Ñ‡∑è\x20',
        '\x20‡∂Ø‡∑ö‡∂Ø‡∑î',
        'mxLBD',
        'TtIzf',
        'mage*',
        '6209658fGEBeX',
        '135526yDuFUk',
        '‡∂∫‡∑ù\x20‡∂∂‡∑Ä',
        '\x5c+\x5c+\x20',
        'ChRtk',
        'KEbbt',
        'bJxPJ',
        '\x20‡∑Ä‡∑ö‡∂ú‡∑Ä',
        'urima',
        'he\x20ph',
        'GpwGv',
        'oiced',
        'dsowz',
        'me*\x0a',
        'vKrbQ',
        'ative',
        '‡∑è\x20‡∂Ω‡∑É‡∑ä',
        'hUEjC',
        '\x20‡∂Ö‡∂ú‡∂∫\x20',
        'PeRba',
        '‡∂≠‡∂≠‡∑ä‡∂¥‡∂ª',
        '218936UcEnFP',
        'epmeT',
        '‡∂ö‡∑è‡∂ª‡∂ö*',
        '\x20‡∂ö‡∂ª‡∂∫‡∑í',
        '‡∑Ä‡∑è‡∂Ø‡∂±‡∂∫',
        'ijzsd',
        '\x20‡∑É‡∂Ç‡∑É‡∑ä',
        'ce\x20as',
        'state',
        'CFBRG',
        'b*\x0a',
        'fFKhX',
        '\x20Make',
        'input',
        '‡∂∫‡∑ù\x20‡∂¥‡∂ß',
        '\x2050%‡∂ö',
        'count',
        'ExTrQ',
        ':\x20*.e',
        'p4col',
        'ack\x20a',
        'ttrac',
        'üí†üîÆ\x20*\x20',
        '‡∂ö\x20‡∂∂‡∂Ω‡∂¥',
        '‡∂Ø‡∂∫‡∑í.\x0a',
        'RSVRE',
        's\x20the',
        'her*\x0a',
        's.\x0a\x0a',
        'ease\x20',
        '\x20Conv',
        '4edge',
        '‡∑î‡∂∂‡∑í‡∂∏\x20',
        'video',
        'eRwwF',
        'websi',
        'FPS\x20o',
        'QT\x20va',
        'equen',
        'XNmxe',
        'ct\x20to',
        'wiynz',
        '\x20nost',
        'um\x20of',
        '‡∂∫‡∑ö\x20‡∂¥‡∑É',
        'ume*\x0a',
        'inbow',
        'DjCSw',
        'rue-s',
        'XNiVw',
        'tOOjZ',
        'hance',
        '‡∂±‡∂∫\x20‡∂ö‡∂ª',
        'gmIDe',
        'dnFjH',
        'xXQuw',
        ':\x20*.w',
        'ow-mo',
        'zgVwu',
        'd\x20thi',
        'image',
        '‡∂±‡∑ä\x20‡∂°‡∑è',
        '‡∑Ä‡∂ª‡∑ä‡∂´\x20',
        ':\x20*.n',
        'SRlZw',
        'aZYAP',
        'actio',
        'OyKXE',
        'tion\x20',
        'f\x20sou',
        '4enha',
        'timag',
        '\x20*.x2',
        ':\x20*.c',
        ':\x20*.m',
        '‡∑î‡∂ª‡∑î\x20‡∑Ñ',
        'Objec',
        '\x20‡∑Ä‡∂Ω\x20‡∑Ä'
    ];
    _0x246e = function () {
        return _0x54ccb5;
    };
    return _0x246e();
}
function _0x39049b(_0x30f112, _0x49c543, _0x36a4a5, _0xca0d1b, _0x1e56fd) {
    return _0xe97a(_0x1e56fd - -0x135, _0x36a4a5);
}
const _0x55b5b9 = (function () {
    function _0xb495d(_0x3dfc1d, _0x383436, _0x8bedf4, _0x165ebd, _0x5e8055) {
        return _0xe97a(_0x165ebd - -0x36b, _0x383436);
    }
    const _0x1931d4 = {
        'CelrX': _0x332b10(0x11b, 0x30f, 0x1d1, 0x300, 0xca) + _0x429c39(-0x29, 0x67, 0x37, -0xee, -0x18c) + _0xb495d(-0x1f0, -0x34c, -0x22f, -0x251, -0x3b1) + ')',
        'PeRba': _0x429c39(0xa2, 0x1c7, -0x9, 0x1e, 0xaa) + _0x332b10(0x36e, 0x396, 0x30f, 0x35e, 0x42b) + _0x332b10(0x68, 0x2c2, 0x17d, 0x23a, 0xc8) + _0x332b10(0x426, 0x2ca, 0x2f8, 0x24d, 0x2e5) + _0xb495d(-0x10f, -0x250, -0x249, -0x190, -0x237) + _0x2a3550(0x13, 0x186, 0x169, 0x16e, 0xfe) + _0x429c39(-0xd2, -0x162, -0xfd, -0x20d, 0x62),
        'sdQul': function (_0x1aae5d, _0x31ac29) {
            return _0x1aae5d(_0x31ac29);
        },
        'ZzBeM': _0x429c39(-0x5f, -0x87, -0x164, -0x93, -0xbf),
        'WOZEy': function (_0x1f75c3, _0x110722) {
            return _0x1f75c3 + _0x110722;
        },
        'urZzC': _0x332b10(0x1d8, 0x12e, 0xaf, -0x4e, 0x4a),
        'KbSyP': function (_0x58718c, _0x4557ee) {
            return _0x58718c + _0x4557ee;
        },
        'OyKXE': _0x2a3550(0x1fd, 0x47, -0x87, 0xcd, 0x1da),
        'wiynz': function (_0x319bdf) {
            return _0x319bdf();
        },
        'zgVwu': function (_0x2597c9, _0x4b3450, _0x13b353) {
            return _0x2597c9(_0x4b3450, _0x13b353);
        },
        'KCkjX': function (_0x157f98, _0x216e85) {
            return _0x157f98(_0x216e85);
        },
        'JnBLG': function (_0x5ab190, _0x490140) {
            return _0x5ab190 === _0x490140;
        },
        'vrGqi': _0x2a3550(0x1d4, 0x212, -0x78, 0xb9, 0x20c),
        'rICbS': function (_0x59d8e1, _0x5419db) {
            return _0x59d8e1 !== _0x5419db;
        },
        'TtIzf': _0xb495d(-0x17d, -0x23e, -0x19b, -0x108, -0x133),
        'CFBRG': _0x2a3550(-0x22, 0x64, 0x1f7, 0x13d, 0x190),
        'YjJCf': function (_0x171ed4, _0x4501e4) {
            return _0x171ed4 !== _0x4501e4;
        },
        'GwqCD': _0xb495d(-0x227, -0x1e, 0x3, -0xf0, -0xc4)
    };
    function _0x4a2d8d(_0x4c62aa, _0xd6af8c, _0x3252ed, _0x231d6b, _0x5a8c53) {
        return _0xe97a(_0xd6af8c - 0x171, _0x231d6b);
    }
    function _0x429c39(_0x184e7d, _0x48bbdb, _0xce9a7d, _0x5a0b2d, _0xd8f4d5) {
        return _0xe97a(_0x184e7d - -0x158, _0xce9a7d);
    }
    let _0x54abcb = !![];
    function _0x332b10(_0x318107, _0x10e13d, _0x35f6a5, _0x17905b, _0x4ca35d) {
        return _0xe97a(_0x35f6a5 - 0xe, _0x10e13d);
    }
    function _0x2a3550(_0x5e0772, _0xc6d143, _0x32923f, _0x3abbb1, _0x3c0c6d) {
        return _0xe97a(_0x3abbb1 - -0x14c, _0x3c0c6d);
    }
    return function (_0x4d579f, _0xf2774) {
        const _0x3878c8 = {
            'XNmxe': _0x1931d4[_0x18cc5a(0x205, 0x19c, 0x244, 0xeb, 0x221)],
            'GpwGv': _0x1931d4[_0x5766cc(0x5e9, 0x585, 0x48b, 0x3a6, 0x4d2)],
            'NQrJP': function (_0x59c54d, _0x386cdd) {
                function _0x46acb8(_0x3cc3fe, _0x344fc3, _0x4d993a, _0x276242, _0x17e0eb) {
                    return _0x5766cc(_0x3cc3fe - 0x118, _0x344fc3 - 0x161, _0x276242 - -0x369, _0x276242 - 0xc9, _0x17e0eb);
                }
                return _0x1931d4[_0x46acb8(-0x63, 0x195, 0x69, 0x9e, 0x5c)](_0x59c54d, _0x386cdd);
            },
            'FZJOg': _0x1931d4[_0x18cc5a(0x417, 0x55f, 0x3dd, 0x3bc, 0x42c)],
            'idhyu': function (_0x3dff94, _0x2a5dfe) {
                function _0x5cab4a(_0x40b81b, _0x412013, _0x32a3b9, _0x353a4c, _0x376a09) {
                    return _0x18cc5a(_0x412013 - -0x233, _0x376a09, _0x32a3b9 - 0xfb, _0x353a4c - 0xf6, _0x376a09 - 0xd8);
                }
                return _0x1931d4[_0x5cab4a(0x246, 0x15d, 0x129, 0x71, 0x1a)](_0x3dff94, _0x2a5dfe);
            },
            'TOvWH': _0x1931d4[_0x18cc5a(0x1fe, 0x34e, 0x199, 0x2c7, 0x1cb)],
            'QXwEb': function (_0x5a6005, _0x479132) {
                function _0x2fdc0f(_0x4a3d9a, _0x1ea0a4, _0x2d28fe, _0x345d5e, _0x1489e4) {
                    return _0x138e14(_0x4a3d9a - 0x79, _0x345d5e, _0x2d28fe - 0x123, _0x1489e4 - 0x1c2, _0x1489e4 - 0xeb);
                }
                return _0x1931d4[_0x2fdc0f(0x436, 0x550, 0x474, 0x59f, 0x53d)](_0x5a6005, _0x479132);
            },
            'WZYhK': _0x1931d4[_0x138e14(0x125, 0x282, 0x1a6, 0x283, 0x384)],
            'XdQWz': function (_0x6d3f4e) {
                function _0x44a258(_0x40a9c1, _0x2c86db, _0x3c26fd, _0x361ad6, _0x451bb5) {
                    return _0x138e14(_0x40a9c1 - 0x3f, _0x40a9c1, _0x3c26fd - 0x1cd, _0x3c26fd - 0x263, _0x451bb5 - 0x60);
                }
                return _0x1931d4[_0x44a258(0x59c, 0x567, 0x4cc, 0x56b, 0x49a)](_0x6d3f4e);
            },
            'gUokM': function (_0xa0426f, _0x42a6d5, _0x103d33) {
                function _0x1895ba(_0x3062fa, _0x345aef, _0x2d2b36, _0x13372d, _0x42a9ff) {
                    return _0x138e14(_0x3062fa - 0x17c, _0x3062fa, _0x2d2b36 - 0x1f0, _0x13372d - 0x1da, _0x42a9ff - 0xc5);
                }
                return _0x1931d4[_0x1895ba(0x362, 0x5b4, 0x496, 0x454, 0x3da)](_0xa0426f, _0x42a6d5, _0x103d33);
            },
            'Egcoi': function (_0x27e559, _0x13626c) {
                function _0x2b98a5(_0x4ac8db, _0x4c25cf, _0x5867a9, _0x117e26, _0x31a3aa) {
                    return _0x1f9d87(_0x4c25cf, _0x4ac8db - -0x4e8, _0x5867a9 - 0x13c, _0x117e26 - 0xe1, _0x31a3aa - 0x6c);
                }
                return _0x1931d4[_0x2b98a5(0xc3, -0x6a, 0x1e7, -0x38, 0x72)](_0x27e559, _0x13626c);
            },
            'RBVQK': function (_0x1477fc, _0x30aa9e) {
                function _0x3c7235(_0x455c2a, _0x2ba8c2, _0x267182, _0x829510, _0x5c9950) {
                    return _0x1f9d87(_0x829510, _0x2ba8c2 - 0x71, _0x267182 - 0x125, _0x829510 - 0x14a, _0x5c9950 - 0x18a);
                }
                return _0x1931d4[_0x3c7235(0x417, 0x45d, 0x390, 0x38a, 0x367)](_0x1477fc, _0x30aa9e);
            },
            'aZYAP': _0x1931d4[_0x1f9d87(0x52c, 0x5c0, 0x4b8, 0x499, 0x4fb)],
            'nwgmR': function (_0x1b4f88, _0x329819) {
                function _0x4958d1(_0x5d60d, _0x477203, _0x3295ac, _0x5b912d, _0xef1f22) {
                    return _0x1f6aa8(_0x5b912d - -0x2cb, _0x477203 - 0x4c, _0x5d60d, _0x5b912d - 0x141, _0xef1f22 - 0x15e);
                }
                return _0x1931d4[_0x4958d1(0x3a0, 0x40a, 0x326, 0x328, 0x3ef)](_0x1b4f88, _0x329819);
            },
            'IFORG': _0x1931d4[_0x1f9d87(0x398, 0x499, 0x5bc, 0x509, 0x5f6)],
            'yqIev': _0x1931d4[_0x18cc5a(0x34a, 0x48a, 0x3ed, 0x457, 0x434)]
        };
        function _0x18cc5a(_0x9a73bb, _0x51a9be, _0x504480, _0x421d6b, _0x2faf9a) {
            return _0x2a3550(_0x9a73bb - 0x185, _0x51a9be - 0x19a, _0x504480 - 0xbc, _0x9a73bb - 0x281, _0x51a9be);
        }
        function _0x1f6aa8(_0x118c2a, _0x932abe, _0x29fa57, _0x13093f, _0x5e0a9d) {
            return _0xb495d(_0x118c2a - 0x2d, _0x29fa57, _0x29fa57 - 0x76, _0x118c2a - 0x68e, _0x5e0a9d - 0xfd);
        }
        function _0x1f9d87(_0x1fbce4, _0x20682d, _0x42328d, _0x33cb25, _0x38144f) {
            return _0x4a2d8d(_0x1fbce4 - 0x37, _0x20682d - 0x133, _0x42328d - 0x106, _0x1fbce4, _0x38144f - 0x135);
        }
        function _0x5766cc(_0x577dff, _0x1c647c, _0x3ae88a, _0x45a7de, _0x50858d) {
            return _0x2a3550(_0x577dff - 0x13f, _0x1c647c - 0x55, _0x3ae88a - 0x1c8, _0x3ae88a - 0x3cd, _0x50858d);
        }
        function _0x138e14(_0x4da376, _0x1eb43c, _0x9e940f, _0x31efe3, _0x31e1aa) {
            return _0x429c39(_0x31efe3 - 0x18c, _0x1eb43c - 0x1c7, _0x1eb43c, _0x31efe3 - 0x7e, _0x31e1aa - 0xe8);
        }
        if (_0x1931d4[_0x1f9d87(0x2c1, 0x389, 0x284, 0x380, 0x34f)](_0x1931d4[_0x1f6aa8(0x625, 0x51d, 0x700, 0x68e, 0x70e)], _0x1931d4[_0x138e14(0x210, 0x237, 0x41a, 0x336, 0x28f)])) {
            const _0x3db0b5 = {
                'PSSsy': _0x3878c8[_0x1f6aa8(0x556, 0x566, 0x4d7, 0x56d, 0x66f)],
                'kBZki': _0x3878c8[_0x1f9d87(0x397, 0x4a5, 0x519, 0x5d9, 0x419)],
                'jMPKz': function (_0x31cc94, _0x141d36) {
                    function _0x2fd1ab(_0x41c966, _0x487127, _0x3762f2, _0x177ff1, _0x1b1030) {
                        return _0x1f6aa8(_0x3762f2 - -0x57e, _0x487127 - 0xac, _0x177ff1, _0x177ff1 - 0xb1, _0x1b1030 - 0xfb);
                    }
                    return _0x3878c8[_0x2fd1ab(0x1e5, 0x131, 0xe1, 0x1b9, -0x3f)](_0x31cc94, _0x141d36);
                },
                'bUuqE': _0x3878c8[_0x138e14(0x43e, 0x2a4, 0x20c, 0x303, 0x369)],
                'DfVsY': function (_0x469134, _0x18ede8) {
                    function _0x239aa4(_0x19a0a4, _0x2ef06c, _0x98ec25, _0x173452, _0x55ebf4) {
                        return _0x138e14(_0x19a0a4 - 0x193, _0x173452, _0x98ec25 - 0x111, _0x55ebf4 - 0x39f, _0x55ebf4 - 0xb3);
                    }
                    return _0x3878c8[_0x239aa4(0x5e6, 0x607, 0x3b2, 0x538, 0x511)](_0x469134, _0x18ede8);
                },
                'IQhQg': _0x3878c8[_0x138e14(0x275, 0x404, 0x309, 0x2d3, 0x1da)],
                'xXQuw': function (_0x565dfa, _0x4d467a) {
                    function _0x2abdc7(_0x518525, _0x4e7979, _0x526388, _0x18d4bf, _0x17b44c) {
                        return _0x18cc5a(_0x518525 - 0x195, _0x526388, _0x526388 - 0xb2, _0x18d4bf - 0x19d, _0x17b44c - 0x1c2);
                    }
                    return _0x3878c8[_0x2abdc7(0x3d2, 0x37f, 0x3f2, 0x2d5, 0x405)](_0x565dfa, _0x4d467a);
                },
                'SDYdX': _0x3878c8[_0x18cc5a(0x257, 0x29c, 0x2a3, 0x1d5, 0x271)],
                'qPock': function (_0x513a5d) {
                    function _0x3c7233(_0x1700c2, _0x4c6de3, _0x1bf6aa, _0x41cf86, _0x3da4c7) {
                        return _0x138e14(_0x1700c2 - 0x1cb, _0x41cf86, _0x1bf6aa - 0x125, _0x1bf6aa - 0x1d9, _0x3da4c7 - 0x193);
                    }
                    return _0x3878c8[_0x3c7233(0x1f3, 0x472, 0x32e, 0x485, 0x29f)](_0x513a5d);
                }
            };
            _0x3878c8[_0x18cc5a(0x277, 0x1de, 0x3cc, 0x34d, 0x2ef)](_0x5b3196, this, function () {
                const _0x32e7dc = new _0x14e4b0(_0x3db0b5[_0x4094b3(0x508, 0x502, 0x5cd, 0x5af, 0x63b)]);
                function _0x4094b3(_0x2f242c, _0x328e4f, _0x23f881, _0x2feb86, _0x4235d2) {
                    return _0x1f9d87(_0x2f242c, _0x328e4f - -0x44, _0x23f881 - 0x87, _0x2feb86 - 0x13f, _0x4235d2 - 0x1bd);
                }
                const _0x1b346a = new _0x5db5ff(_0x3db0b5[_0x53d399(0x300, 0x263, 0x394, 0x40e, 0x366)], 'i'), _0x13ac5d = _0x3db0b5[_0x53d399(-0x16, 0x18c, 0x11b, 0x1e3, 0x4e)](_0x126c04, _0x3db0b5[_0x4094b3(0x57f, 0x533, 0x652, 0x556, 0x3f0)]);
                function _0x576c7f(_0x3da983, _0x77572e, _0x422fbc, _0x3bb9ef, _0x5e3d60) {
                    return _0x5766cc(_0x3da983 - 0x1a8, _0x77572e - 0x7b, _0x3bb9ef - -0x1bd, _0x3bb9ef - 0x1a6, _0x77572e);
                }
                function _0x5f3eba(_0x5e599c, _0x4ff579, _0x2fe61d, _0x523cc4, _0x3d5518) {
                    return _0x1f6aa8(_0x3d5518 - -0x10b, _0x4ff579 - 0x20, _0x2fe61d, _0x523cc4 - 0x61, _0x3d5518 - 0xd6);
                }
                function _0x53d399(_0x2d552e, _0x522eb6, _0x49b025, _0x11cf7c, _0x217a27) {
                    return _0x1f6aa8(_0x49b025 - -0x2cf, _0x522eb6 - 0x195, _0x2d552e, _0x11cf7c - 0xe, _0x217a27 - 0xce);
                }
                function _0x5dcb0f(_0x1606f6, _0x11ceb0, _0x1dc74f, _0x411e35, _0x179209) {
                    return _0x138e14(_0x1606f6 - 0x159, _0x179209, _0x1dc74f - 0xcf, _0x1606f6 - 0x104, _0x179209 - 0xb7);
                }
                !_0x32e7dc[_0x5dcb0f(0x247, 0x224, 0x381, 0x21e, 0x315)](_0x3db0b5[_0x4094b3(0x284, 0x39c, 0x477, 0x256, 0x464)](_0x13ac5d, _0x3db0b5[_0x5dcb0f(0x1f5, 0x1bb, 0x27e, 0xc5, 0x198)])) || !_0x1b346a[_0x576c7f(0x1cd, 0x102, 0x32c, 0x1d3, 0x84)](_0x3db0b5[_0x5f3eba(0x5bc, 0x401, 0x346, 0x5a9, 0x45b)](_0x13ac5d, _0x3db0b5[_0x5dcb0f(0x239, 0xfa, 0x1a7, 0x241, 0x2a2)])) ? _0x3db0b5[_0x4094b3(0x247, 0x327, 0x2e3, 0x28e, 0x481)](_0x13ac5d, '0') : _0x3db0b5[_0x53d399(0x6a, -0x4, 0x15b, 0x23b, 0xd8)](_0x3d835e);
            })();
        } else {
            const _0x6a9a81 = _0x54abcb ? function () {
                function _0x180401(_0x4b0f9e, _0x2c9de7, _0x3c63ce, _0x527305, _0x4ac57e) {
                    return _0x1f6aa8(_0x3c63ce - -0x1eb, _0x2c9de7 - 0x172, _0x527305, _0x527305 - 0x4, _0x4ac57e - 0x1a5);
                }
                function _0x481afa(_0xab17fe, _0xdba6c8, _0x556644, _0x2fc4e4, _0x2f5d9a) {
                    return _0x1f9d87(_0x2fc4e4, _0x2f5d9a - -0x403, _0x556644 - 0x33, _0x2fc4e4 - 0x198, _0x2f5d9a - 0x82);
                }
                function _0x3f806c(_0x3a8ee7, _0x1d90ba, _0x3b6e0f, _0x309405, _0x42216b) {
                    return _0x138e14(_0x3a8ee7 - 0x3, _0x3b6e0f, _0x3b6e0f - 0x144, _0x42216b - -0x11, _0x42216b - 0x8c);
                }
                function _0x10ac19(_0x43132b, _0x5c12a5, _0x24cf57, _0x244311, _0x8bf9a7) {
                    return _0x1f6aa8(_0x244311 - -0x656, _0x5c12a5 - 0xf2, _0x5c12a5, _0x244311 - 0xaa, _0x8bf9a7 - 0x3d);
                }
                function _0xb6478c(_0x28fc77, _0x57573d, _0x1760b3, _0x489f02, _0x3cfe7a) {
                    return _0x138e14(_0x28fc77 - 0x1a9, _0x3cfe7a, _0x1760b3 - 0x12d, _0x28fc77 - -0x280, _0x3cfe7a - 0xd0);
                }
                if (_0x3878c8[_0xb6478c(0xfa, 0x1af, 0x2d, 0x1b7, -0x2b)](_0x3878c8[_0x3f806c(0x14b, 0x1ca, 0x3bf, 0x2ae, 0x270)], _0x3878c8[_0x3f806c(0x1cd, 0x21d, 0x2a1, 0x3ab, 0x270)])) {
                    if (_0xf2774) {
                        if (_0x3878c8[_0x10ac19(-0x1ac, -0xfc, -0x2a4, -0x231, -0x174)](_0x3878c8[_0x481afa(-0x151, -0xd3, -0x145, 0x16f, 0xf)], _0x3878c8[_0xb6478c(-0x1a4, -0x105, -0x233, -0x17c, -0x1fb)])) {
                            const _0x463342 = _0xf2774[_0x180401(0x47e, 0x4f9, 0x40d, 0x359, 0x2b8)](_0x4d579f, arguments);
                            return _0xf2774 = null, _0x463342;
                        } else
                            _0x3878c8[_0xb6478c(-0x19a, -0x1eb, -0x176, -0x22d, -0x1e9)](_0x536613, '0');
                    }
                } else
                    _0x3878c8[_0x180401(0x39e, 0x2ec, 0x259, 0x38a, 0x3b7)](_0x2cd60f);
            } : function () {
            };
            return _0x54abcb = ![], _0x6a9a81;
        }
    };
}());
function _0xfc290b(_0x5b77b2, _0x1d63a2, _0x45624d, _0x29efa8, _0x2f2dc2) {
    return _0xe97a(_0x5b77b2 - -0xdd, _0x29efa8);
}
(function () {
    function _0x5bacb4(_0x3bce50, _0x192f5d, _0x386ad6, _0x95eecf, _0x268445) {
        return _0xe97a(_0x192f5d - -0x357, _0x386ad6);
    }
    function _0x510808(_0x10ccf3, _0x4e7d06, _0x18bdfe, _0x2c7724, _0x1b065d) {
        return _0xe97a(_0x10ccf3 - 0x33d, _0x4e7d06);
    }
    function _0x315045(_0xe8290d, _0xcfcd0c, _0x5af415, _0x1da6f9, _0x10970c) {
        return _0xe97a(_0xe8290d - -0x1ee, _0xcfcd0c);
    }
    const _0xc57b77 = {
        'OIjWq': _0x510808(0x500, 0x510, 0x601, 0x47b, 0x3b7) + _0x5bacb4(-0x2e5, -0x228, -0x1b7, -0x379, -0xee) + _0x43e0d3(0x22c, 0x1c4, 0x299, 0x1ef, 0x1df) + ')',
        'bJxPJ': _0x43e0d3(0x3cf, 0x226, 0x26a, 0x203, 0x2bf) + _0x43e0d3(0x392, 0x3f3, 0x45f, 0x26c, 0x3c6) + _0x510808(0x4ac, 0x482, 0x392, 0x45d, 0x60d) + _0x510808(0x627, 0x53c, 0x658, 0x748, 0x58b) + _0x315045(-0x13, -0x14, -0x42, 0x33, -0x12c) + _0x510808(0x5f7, 0x597, 0x64a, 0x641, 0x5ca) + _0x43e0d3(0x2b, 0x263, 0x164, 0x1d5, 0x14b),
        'oxFbN': function (_0x18e286, _0x12ebc7) {
            return _0x18e286(_0x12ebc7);
        },
        'sHDyF': _0x315045(-0xf5, -0x126, 0x46, -0x5b, -0xa7),
        'vZTtd': function (_0x47a756, _0x5c570f) {
            return _0x47a756 + _0x5c570f;
        },
        'EiNmL': _0x43e0d3(0x1b1, 0x155, 0x15a, 0x10f, 0x166),
        'SRlZw': function (_0x3e517e, _0x50ebca) {
            return _0x3e517e + _0x50ebca;
        },
        'wfYIB': _0x5bacb4(-0x128, -0x13e, -0x166, -0x6c, -0x277),
        'ijzsd': function (_0x48047c, _0x2512bd) {
            return _0x48047c(_0x2512bd);
        },
        'AiZvo': function (_0x59ae67) {
            return _0x59ae67();
        },
        'mxLBD': function (_0x2e754d) {
            return _0x2e754d();
        },
        'UOHiH': function (_0x281963, _0x43cc9d) {
            return _0x281963 !== _0x43cc9d;
        },
        'lPTZC': _0x5bacb4(-0x289, -0x172, -0x27, -0xb3, -0x26d),
        'excqg': function (_0x156837, _0x542c18) {
            return _0x156837(_0x542c18);
        },
        'tCMFi': function (_0x3947e2, _0x38853f) {
            return _0x3947e2 + _0x38853f;
        },
        'gpwxI': function (_0x4c113a, _0x28af84) {
            return _0x4c113a + _0x28af84;
        },
        'hUEjC': function (_0x314ad2, _0x325ef8) {
            return _0x314ad2 === _0x325ef8;
        },
        'mKCdA': _0x5bacb4(-0x1fa, -0x224, -0x34c, -0x1dc, -0x2ff),
        'qxeuE': function (_0x35072c, _0x15f7e0) {
            return _0x35072c(_0x15f7e0);
        },
        'ymkFc': _0x5bacb4(-0x245, -0x213, -0x22c, -0x300, -0x181),
        'doWzv': function (_0x4f21c5, _0x523daf, _0x29cc81) {
            return _0x4f21c5(_0x523daf, _0x29cc81);
        }
    };
    function _0x344cc1(_0x2610f7, _0x561cb7, _0x400910, _0x8c515f, _0x5eb55a) {
        return _0xe97a(_0x400910 - -0x9e, _0x2610f7);
    }
    function _0x43e0d3(_0x12330d, _0x191a0a, _0x3bb8e2, _0x3e8a50, _0x4b6e88) {
        return _0xe97a(_0x4b6e88 - 0xc5, _0x3bb8e2);
    }
    _0xc57b77[_0x5bacb4(-0x2f, -0x27, 0xa, -0xeb, -0x9c)](_0x55b5b9, this, function () {
        const _0x40c057 = {
            'hOPPl': _0xc57b77[_0x541099(0x13e, 0x272, 0x1bf, 0xd8, 0x139)],
            'XNiVw': _0xc57b77[_0x541099(0x14e, 0x245, 0x1ec, 0x161, 0x16d)],
            'JCfYR': function (_0xa0d0f, _0x1ec000) {
                function _0x193cda(_0x1b54bc, _0x55940b, _0x5199e4, _0x56d992, _0x5e9e5c) {
                    return _0x52a90f(_0x1b54bc - 0xe9, _0x55940b - 0x71, _0x5199e4 - 0xf8, _0x55940b, _0x1b54bc - -0x110);
                }
                return _0xc57b77[_0x193cda(-0xa6, -0xae, 0xb8, -0x38, 0x54)](_0xa0d0f, _0x1ec000);
            },
            'abghC': _0xc57b77[_0x541099(0x1d7, 0x7f, 0x76, 0x10a, 0xcd)],
            'kvOQZ': function (_0x5342a2, _0x19343b) {
                function _0x368435(_0x2b0e20, _0x383a5b, _0x23b8be, _0x4d0159, _0x56986d) {
                    return _0x52a90f(_0x2b0e20 - 0x111, _0x383a5b - 0x16f, _0x23b8be - 0x14e, _0x2b0e20, _0x4d0159 - 0x272);
                }
                return _0xc57b77[_0x368435(0x243, 0x33f, 0x3f6, 0x2bc, 0x2d9)](_0x5342a2, _0x19343b);
            },
            'YWjAj': _0xc57b77[_0x5cb6b0(0x209, -0xb3, 0x7d, 0xb1, 0x9f)],
            'cBAHy': function (_0x376e32, _0x74e8b2) {
                function _0x3e904b(_0x4a5d0f, _0x14c0bf, _0x17478d, _0x59e35b, _0xdcba84) {
                    return _0x496cb3(_0xdcba84 - -0x1bc, _0x14c0bf - 0x16e, _0x17478d - 0x76, _0x14c0bf, _0xdcba84 - 0x148);
                }
                return _0xc57b77[_0x3e904b(0x2f0, 0x1ed, 0x378, 0x3fa, 0x2e1)](_0x376e32, _0x74e8b2);
            },
            'OdYJe': _0xc57b77[_0x52a90f(-0x188, -0x1b7, -0x239, -0x2b8, -0x17a)],
            'Satqf': function (_0x3757bb, _0x2ed91d) {
                function _0xde838e(_0x5d567a, _0x535b7d, _0x3174f8, _0x5ddbf2, _0x16afa0) {
                    return _0x496cb3(_0x535b7d - -0x3e, _0x535b7d - 0x12e, _0x3174f8 - 0xd0, _0x16afa0, _0x16afa0 - 0x100);
                }
                return _0xc57b77[_0xde838e(0x3b0, 0x424, 0x454, 0x341, 0x31f)](_0x3757bb, _0x2ed91d);
            },
            'aZvOq': function (_0x5d65f8) {
                function _0x49ae18(_0x3481f9, _0x7c775f, _0x46992f, _0x241343, _0x14d6b4) {
                    return _0x450b9f(_0x3481f9, _0x7c775f - 0xc7, _0x241343 - 0x2d1, _0x241343 - 0x32, _0x14d6b4 - 0x1b3);
                }
                return _0xc57b77[_0x49ae18(0x1f6, 0x2c1, 0x30e, 0x2de, 0x255)](_0x5d65f8);
            },
            'tsnRk': function (_0xd1f94f) {
                function _0x985669(_0x14669b, _0x539e9e, _0x10a4eb, _0x3393a7, _0x3bcbc7) {
                    return _0x52a90f(_0x14669b - 0x1c1, _0x539e9e - 0x1, _0x10a4eb - 0x29, _0x14669b, _0x3bcbc7 - 0x59b);
                }
                return _0xc57b77[_0x985669(0x4c6, 0x668, 0x3d9, 0x51e, 0x52b)](_0xd1f94f);
            }
        };
        function _0x52a90f(_0x1fe5fe, _0x32c336, _0x1e43e4, _0x2fb06b, _0x30fb1d) {
            return _0x43e0d3(_0x1fe5fe - 0xf4, _0x32c336 - 0x181, _0x2fb06b, _0x2fb06b - 0x1ba, _0x30fb1d - -0x329);
        }
        function _0x5cb6b0(_0x2367f6, _0x54bde6, _0x3dcddb, _0x47615b, _0x129a5) {
            return _0x510808(_0x47615b - -0x34a, _0x3dcddb, _0x3dcddb - 0x1a4, _0x47615b - 0x1db, _0x129a5 - 0x1ae);
        }
        function _0x496cb3(_0x3fae34, _0x2505dc, _0x47a854, _0x305480, _0x1e39dd) {
            return _0x43e0d3(_0x3fae34 - 0x60, _0x2505dc - 0x196, _0x305480, _0x305480 - 0x1be, _0x3fae34 - 0x18c);
        }
        function _0x450b9f(_0x26cfd5, _0x5b55ee, _0x812ccd, _0x3c7a40, _0x5cbe74) {
            return _0x43e0d3(_0x26cfd5 - 0x1b2, _0x5b55ee - 0x197, _0x26cfd5, _0x3c7a40 - 0x1f1, _0x812ccd - -0x237);
        }
        function _0x541099(_0x24fe98, _0xfd76a8, _0x1ff085, _0x51e7ac, _0x1f3339) {
            return _0x315045(_0x1ff085 - 0x1dd, _0x1f3339, _0x1ff085 - 0x189, _0x51e7ac - 0x1af, _0x1f3339 - 0x135);
        }
        if (_0xc57b77[_0x450b9f(-0x95, -0x107, -0xef, -0x1a1, -0x207)](_0xc57b77[_0x52a90f(0xaa, -0x1b5, -0x66, -0x1a6, -0x88)], _0xc57b77[_0x450b9f(0x137, 0x6e, 0x6a, 0xca, -0x62)])) {
            if (_0x13e14d) {
                const _0x16adba = _0x38f9ae[_0x450b9f(0x99, 0x2bb, 0x163, 0x16c, 0x1e3)](_0x36daf8, arguments);
                return _0x3eba83 = null, _0x16adba;
            }
        } else {
            const _0x41cd03 = new RegExp(_0xc57b77[_0x5cb6b0(0x107, 0x23e, 0x22f, 0x1c3, 0x2a6)]), _0x552661 = new RegExp(_0xc57b77[_0x450b9f(0xc5, 0x89, 0x8b, 0x182, -0xa)], 'i'), _0x226bbe = _0xc57b77[_0x52a90f(-0xcc, -0x116, -0x151, -0x1e5, -0x1e5)](_0x151a5e, _0xc57b77[_0x52a90f(-0xca, -0x1e9, -0xb6, -0x1ea, -0x1dd)]);
            if (!_0x41cd03[_0x450b9f(-0xc9, 0x99, -0x63, 0xdb, -0x1bf)](_0xc57b77[_0x496cb3(0x327, 0x2aa, 0x2db, 0x439, 0x37a)](_0x226bbe, _0xc57b77[_0x450b9f(0x4f, -0x1fd, -0xb4, -0x35, 0x34)])) || !_0x552661[_0x541099(0x149, 0x22a, 0xfe, -0x4e, 0x25d)](_0xc57b77[_0x496cb3(0x4eb, 0x4d4, 0x60a, 0x481, 0x47a)](_0x226bbe, _0xc57b77[_0x52a90f(-0x217, -0x2cf, -0x68, -0x299, -0x17a)]))) {
                if (_0xc57b77[_0x450b9f(0x1ec, 0xac, 0x96, 0x15a, -0x54)](_0xc57b77[_0x496cb3(0x410, 0x4d8, 0x467, 0x2c0, 0x428)], _0xc57b77[_0x496cb3(0x410, 0x315, 0x417, 0x54b, 0x4fb)]))
                    _0xc57b77[_0x5cb6b0(0x1a2, 0x284, 0x2f0, 0x299, 0x146)](_0x226bbe, '0');
                else {
                    const _0x51e734 = new _0x2d8fc3(_0x40c057[_0x52a90f(-0x1dd, -0x10, -0xa, -0xcd, -0x168)]), _0x1a6386 = new _0x156f29(_0x40c057[_0x5cb6b0(0x10f, 0x12f, 0xf8, 0x230, 0x270)], 'i'), _0x2fb2c1 = _0x40c057[_0x5cb6b0(-0x65, 0x15d, 0x77, 0xa4, 0x204)](_0x9b59bc, _0x40c057[_0x450b9f(0x12b, 0x28e, 0x17b, 0x124, 0x259)]);
                    !_0x51e734[_0x5cb6b0(0x198, 0x95, 0x47, 0x102, 0x93)](_0x40c057[_0x450b9f(0x1fb, -0x57, 0x106, 0x244, 0x9)](_0x2fb2c1, _0x40c057[_0x52a90f(-0x12b, -0x249, -0x93, -0x1e8, -0x15f)])) || !_0x1a6386[_0x52a90f(-0x16a, -0x20a, -0x1ae, -0x2a, -0x155)](_0x40c057[_0x52a90f(-0x18e, -0x11f, -0x1d2, -0x1c4, -0x77)](_0x2fb2c1, _0x40c057[_0x541099(0x1f7, 0xb1, 0x1c7, 0x95, 0x117)])) ? _0x40c057[_0x496cb3(0x334, 0x2db, 0x427, 0x32e, 0x491)](_0x2fb2c1, '0') : _0x40c057[_0x541099(0x36a, 0x2a9, 0x327, 0x2af, 0x3d3)](_0x97092);
                }
            } else
                _0xc57b77[_0x496cb3(0x459, 0x424, 0x458, 0x30d, 0x57d)](_0xc57b77[_0x450b9f(0x129, 0x66, 0x40, 0xc1, -0x6d)], _0xc57b77[_0x541099(0x18b, 0x198, 0x1a1, 0xd2, 0x21b)]) ? _0xc57b77[_0x496cb3(0x445, 0x59e, 0x40a, 0x31e, 0x4f0)](_0x151a5e) : _0x40c057[_0x5cb6b0(-0x1c, 0xc1, 0x14f, 0x12d, 0xd)](_0x5154e0);
        }
    })();
}());
function _0x135656(_0x3dfa61, _0x71417f, _0x1d1161, _0xf48454, _0x1935d2) {
    return _0xe97a(_0x3dfa61 - 0x2f1, _0x1d1161);
}
function _0x1c985e(_0xba9d7d, _0x52e352, _0x368983, _0x38ef83, _0x69aee1) {
    return _0xe97a(_0x52e352 - 0xb3, _0xba9d7d);
}
const eng = _0xfc290b(0x113, 0x121, 0xac, 0x239, 0x1e1) + _0x1c985e(0x3ab, 0x267, 0x1f3, 0x28e, 0x1dd) + _0x135656(0x440, 0x4a0, 0x4f7, 0x498, 0x355) + _0x135656(0x474, 0x419, 0x486, 0x4fa, 0x426) + _0x39049b(0x229, 0x254, 0x97, 0x16d, 0x1f5) + (_0x135656(0x3ca, 0x2ac, 0x373, 0x46e, 0x2b9) + _0x2fd040(0x119, 0x1b0, 0x85, 0x2d4, 0x1a8) + _0x135656(0x547, 0x627, 0x3fa, 0x4b5, 0x607) + _0x1c985e(0x22c, 0x378, 0x40e, 0x399, 0x2ed) + _0x2fd040(0x0, 0x248, 0x1d5, 0x78, 0x153) + '\x0a') + (_0x39049b(0x2ca, 0x2e5, 0x1b1, 0x23e, 0x1b2) + _0xfc290b(0x31, -0x99, 0x195, 0xdd, -0xae) + _0x135656(0x4ca, 0x549, 0x39d, 0x3d8, 0x619) + _0x39049b(0x45, 0x3e, -0x181, -0x187, -0x2f) + _0x39049b(0x31, 0xe, -0x19, -0x17, 0x3) + _0x135656(0x4df, 0x571, 0x49e, 0x534, 0x441) + _0xfc290b(0x23e, 0x1a0, 0x20d, 0x39d, 0x381) + _0x2fd040(0x52, 0x160, 0x5b, 0x1ea, 0x15f) + '\x0a\x0a') + (_0x39049b(0x109, 0xf0, -0xaa, -0xa1, -0x5c) + _0x2fd040(0x305, 0x12d, 0x99, 0x294, 0x1a8) + _0xfc290b(0x202, 0x265, 0x193, 0x263, 0xf1) + _0x39049b(0x30f, 0x88, 0x32b, 0x197, 0x1d9) + '*\x0a') + (_0x39049b(0x2e9, 0x30c, 0x1a2, 0x110, 0x1b2) + _0x135656(0x3ff, 0x3ba, 0x30b, 0x49d, 0x426) + _0x39049b(0x141, 0x93, 0x36, -0x63, 0xa4) + _0x135656(0x606, 0x768, 0x4aa, 0x6aa, 0x52f) + _0xfc290b(0x7f, 0x59, 0x15c, -0x3c, -0xd3) + _0x39049b(-0x186, -0xfc, -0x9d, -0x16c, -0xa5) + _0x2fd040(0x31e, 0x33c, 0x116, 0x2f5, 0x25d) + _0x39049b(-0x185, -0xcb, 0x123, -0x9e, -0x37) + _0x135656(0x5a9, 0x622, 0x65d, 0x662, 0x48c) + _0x39049b(0x101, 0x23, 0x6f, -0x89, 0xa)) + (_0x1c985e(0x2c6, 0x18c, 0x7c, 0x33, 0x2d6) + _0x39049b(-0x100, -0xe1, 0xe1, -0x3, 0x46) + _0xfc290b(0x179, 0x2da, 0x156, 0xfc, 0x22f) + _0x39049b(-0x9d, 0xd3, 0xb8, -0x17a, -0x59) + _0xfc290b(0x228, 0x1fc, 0xd9, 0x35e, 0x165)) + (_0xfc290b(0x20a, 0x20b, 0x15c, 0x180, 0x114) + _0x1c985e(0x192, 0x1c1, 0x184, 0x227, 0x174) + _0x39049b(0xa9, 0x1fa, 0x1f, 0x179, 0xa4) + _0x39049b(-0x180, -0x1b0, 0xc1, 0x110, -0x51) + _0x1c985e(0x2a9, 0x3ac, 0x39f, 0x4c6, 0x33d) + _0x1c985e(0x335, 0x2ef, 0x2ec, 0x258, 0x448) + _0xfc290b(0x4f, -0x60, 0xab, 0x171, 0xd5) + _0x2fd040(0x18e, -0x74, 0xf2, 0x20d, 0xb8) + _0xfc290b(0x1b0, 0x1c1, 0x208, 0x99, 0x1ca) + _0xfc290b(0x1f0, 0x201, 0x113, 0x153, 0x16d) + _0x1c985e(0x3dc, 0x303, 0x34d, 0x2eb, 0x3d9) + _0x2fd040(0x209, 0x289, 0x114, 0x300, 0x25a) + _0x2fd040(0x357, 0x275, 0xf7, 0x26b, 0x255)) + (_0x1c985e(0xfd, 0x18c, 0x120, 0x136, 0x28e) + _0x39049b(-0x5, 0x91, 0x49, 0x162, 0x46) + _0x1c985e(0x2e9, 0x3a1, 0x4b3, 0x4ad, 0x3b5) + _0x135656(0x4c0, 0x5d0, 0x390, 0x5db, 0x5f2) + '\x0a') + (_0x1c985e(0x3a6, 0x39a, 0x44e, 0x39a, 0x278) + _0x39049b(-0x78, -0xa0, 0x137, 0x59, -0x27) + _0x2fd040(0x17e, 0x159, 0x116, 0x223, 0x206) + _0x2fd040(0x203, 0x221, 0x24e, 0x114, 0xec) + _0x1c985e(0x32a, 0x1e4, 0xb9, 0x1fe, 0x12d) + _0x135656(0x598, 0x5d0, 0x580, 0x468, 0x6ae) + _0x39049b(0x41, 0x9, 0x149, -0x8b, 0x4d) + _0x2fd040(0x329, 0x1a7, 0x304, 0x234, 0x2b1) + _0x135656(0x4b8, 0x3cb, 0x48a, 0x55e, 0x59d) + _0x2fd040(0x162, -0x6a, 0x1da, 0x173, 0xbb)) + (_0x135656(0x3ca, 0x4de, 0x3d3, 0x366, 0x52f) + _0x1c985e(0x37e, 0x22e, 0x18b, 0x365, 0x2b3) + _0x1c985e(0x38b, 0x3a1, 0x267, 0x38d, 0x3b5) + _0xfc290b(-0x60, -0x169, -0xc6, 0xd9, 0x2c) + '\x0a') + (_0x1c985e(0x3a3, 0x39a, 0x249, 0x3e6, 0x486) + _0x2fd040(0x4e, 0x253, 0xb6, 0x1c2, 0x13b) + _0x1c985e(0x295, 0x28c, 0x3a0, 0x257, 0x204) + _0x39049b(-0x3b, 0xc0, -0x1b5, 0xc3, -0x76) + _0x39049b(-0x1c, 0x139, -0x119, -0x3e, -0x4) + _0x1c985e(0x4ab, 0x35a, 0x39c, 0x4b0, 0x2f4) + _0x39049b(-0x4, -0xfc, -0x108, 0xc3, 0x4d) + _0x135656(0x575, 0x5c4, 0x4c4, 0x421, 0x522) + _0x135656(0x565, 0x54f, 0x568, 0x5de, 0x510) + _0xfc290b(-0x4f, 0xa8, 0xc9, -0xab, 0xcd)) + (_0x1c985e(0x214, 0x18c, 0x1d8, 0xef, 0x29a) + _0xfc290b(0x9e, 0x1a6, 0x99, 0x89, 0x93) + _0x1c985e(0x18f, 0x18d, 0x167, 0x1af, 0x26a) + _0xfc290b(0x1ea, 0x2b0, 0x29f, 0x307, 0xca)) + (_0x39049b(0x9f, 0x142, 0x1f0, 0x177, 0x1b2) + _0x39049b(0xfb, -0x188, -0xd0, -0x133, -0x27) + _0x2fd040(0x1e5, 0x17d, 0x184, 0x129, 0x206) + _0x1c985e(0x2a9, 0x2dd, 0x247, 0x21d, 0x2a4) + _0xfc290b(0x9, -0x84, 0xcb, -0x10d, -0x10d) + _0xfc290b(0x150, 0x4a, 0x290, 0x1d4, 0x170) + _0x1c985e(0x397, 0x31a, 0x2af, 0x41e, 0x3d8) + _0x2fd040(0x213, 0x45e, 0x285, 0x329, 0x30d)) + (_0xfc290b(-0x4, 0xa9, 0x149, -0x104, -0xb5) + _0x135656(0x46c, 0x4a9, 0x374, 0x3c6, 0x3e4) + _0x39049b(0x84, 0x14f, -0x88, 0xe3, 0x98) + _0x39049b(0x138, 0x78, 0x0, 0x119, 0x54)) + (_0xfc290b(0x20a, 0x1e4, 0x16c, 0x205, 0x2e7) + _0xfc290b(0x31, -0x61, 0x14f, -0xba, -0x134) + _0x39049b(-0x96, 0xc5, 0x1b3, -0x14, 0xa4) + _0x135656(0x51b, 0x4b3, 0x62f, 0x4f7, 0x4d1) + _0x135656(0x3d7, 0x504, 0x3ae, 0x2d8, 0x40d) + _0x39049b(0x199, 0x2, -0x4c, 0x1eb, 0xf8) + _0x39049b(0xfb, 0x93, 0x2d7, 0x10c, 0x1f4) + _0x1c985e(0x227, 0x2b5, 0x23c, 0x30c, 0x38b) + _0x135656(0x389, 0x326, 0x4cf, 0x41a, 0x4d3) + '\x0a\x0a') + (_0xfc290b(-0x4, 0x64, -0x2f, 0x157, 0x124) + _0x2fd040(0x11e, 0x154, 0x1d3, 0x271, 0x1a8) + _0x39049b(0x1ae, 0x163, 0x244, -0xb, 0x121) + _0x2fd040(0x3d1, 0x3ae, 0x2f6, 0x2cf, 0x2c5) + _0x135656(0x4c2, 0x3e2, 0x431, 0x391, 0x43a)) + (_0x1c985e(0x43d, 0x39a, 0x487, 0x3c2, 0x458) + _0x39049b(-0x132, 0xef, -0x110, -0x16d, -0x27) + _0x2fd040(0x2d2, 0x2f2, 0x1b0, 0xb0, 0x206) + _0x135656(0x573, 0x6a6, 0x632, 0x682, 0x5ba) + _0x39049b(0x132, 0xe7, 0x1f4, 0x122, 0xf1) + _0x39049b(-0x104, -0xd9, 0xf, -0x11, 0x3f) + _0x1c985e(0x2d5, 0x314, 0x207, 0x1cd, 0x2dc) + _0x135656(0x3ee, 0x4c4, 0x49e, 0x45a, 0x477) + _0x2fd040(0x30b, 0x2b3, 0x359, 0x392, 0x29f) + _0xfc290b(0xe, -0xc, 0xa7, -0x10b, 0x3e) + '\x0a\x0a') + (_0x1c985e(0x14c, 0x18c, 0x260, 0x34, 0x26d) + _0xfc290b(0x9e, 0xe1, 0x19a, 0x5c, 0x45) + _0x1c985e(0x1cc, 0x309, 0x340, 0x1bc, 0x346) + _0x39049b(0xb3, 0xb, 0x6a, 0xc3, -0x95) + _0x2fd040(0x131, 0x37e, 0x279, 0x107, 0x243)) + (_0x1c985e(0x3ab, 0x39a, 0x2bd, 0x42a, 0x415) + _0x39049b(0x73, -0x23, -0xf3, -0x18b, -0x27) + _0x135656(0x4ca, 0x4e9, 0x368, 0x39d, 0x556) + _0x2fd040(0x118, -0x26, 0x2, 0x1e1, 0xd0) + _0x1c985e(0xdf, 0x20f, 0x2ad, 0x250, 0x10e) + _0x2fd040(-0x26, 0x5, -0x93, 0xce, 0xbd) + _0x135656(0x5ed, 0x67c, 0x59b, 0x512, 0x4b0) + _0x135656(0x541, 0x64d, 0x429, 0x65a, 0x3f7) + _0xfc290b(0x59, -0x10, 0x106, 0x24, 0x74) + _0x2fd040(0x3ad, 0x435, 0x314, 0x386, 0x308) + _0x39049b(0x2e8, 0x1ce, 0xf9, 0xc9, 0x197)) + (_0x135656(0x3ca, 0x499, 0x52a, 0x3c8, 0x3e5) + _0x135656(0x46c, 0x543, 0x421, 0x38b, 0x47b) + _0x2fd040(0x16a, 0x343, 0x2ae, 0x22b, 0x283) + _0xfc290b(0x46, 0x161, 0x5a, 0xd0, 0xa) + _0xfc290b(0x21e, 0x2fb, 0xd3, 0x2b6, 0x19c) + '\x0a') + (_0x135656(0x5d8, 0x60f, 0x5c7, 0x491, 0x47f) + _0x1c985e(0x92, 0x1c1, 0x108, 0x282, 0x1cd) + _0x39049b(0x17c, 0x207, -0x96, 0x1ac, 0xa4) + _0x1c985e(0x12b, 0x197, 0x37, 0x2e1, 0x22a) + _0xfc290b(0x1c7, 0x91, 0x11a, 0x22f, 0x2e5) + _0x2fd040(0x1, 0x242, 0x1d6, 0x1a2, 0x11d) + _0x1c985e(0x1f7, 0x182, 0x248, 0x148, 0x108) + _0x39049b(0xb6, 0x50, 0x1e, 0x25, 0xb6) + _0x1c985e(0x479, 0x3dc, 0x4b2, 0x40e, 0x335) + _0xfc290b(0xe, 0x99, 0x96, -0x31, -0x115) + '\x0a\x0a') + (_0x2fd040(-0x55, 0x1fb, 0x97, -0x40, 0x106) + _0x135656(0x46c, 0x440, 0x3a2, 0x537, 0x47d) + _0x1c985e(0x3e2, 0x309, 0x1ba, 0x459, 0x1ce) + _0x1c985e(0x2ea, 0x2d2, 0x384, 0x250, 0x297) + _0x39049b(0x57, 0x98, -0xfa, -0xb0, -0xa6)) + (_0x135656(0x5d8, 0x65c, 0x583, 0x695, 0x674) + _0x39049b(0xfe, 0x88, -0xab, 0x4a, -0x27) + _0x2fd040(0x36a, 0xe5, 0x127, 0x2f6, 0x206) + _0xfc290b(0x13b, 0x140, 0xad, 0x268, 0x113) + _0xfc290b(0x149, 0x39, 0x1e3, 0x10f, 0x10e) + _0x1c985e(0x161, 0x209, 0x177, 0x1a5, 0x2ce) + _0x1c985e(0x30a, 0x3ed, 0x442, 0x2c7, 0x36d) + _0x2fd040(0x214, 0x100, 0x1fd, 0xd4, 0xbd) + _0x135656(0x51e, 0x4a5, 0x4e4, 0x4f1, 0x5e4) + _0x39049b(0xda, 0x157, 0x10, 0x61, 0x12) + _0x2fd040(0x251, 0x225, 0x2ff, 0x430, 0x33a) + _0xfc290b(0xf5, 0x63, 0x116, 0xf1, 0x44) + _0x1c985e(0x2bc, 0x3e5, 0x2a2, 0x41d, 0x4f8) + _0x1c985e(0x329, 0x226, 0x127, 0x17f, 0x314) + _0x1c985e(0x26c, 0x141, 0x19a, 0x6a, 0x15)) + (_0x2fd040(-0x1e, 0x1bc, 0x13e, 0x59, 0x106) + _0x2fd040(0x64, 0x28d, 0x101, 0x2e8, 0x1a8) + _0x1c985e(0x3c9, 0x309, 0x36e, 0x2b7, 0x44c) + _0x2fd040(0x2dd, 0x272, 0x248, 0x325, 0x2c2) + '*\x0a') + (_0x39049b(0x120, 0x270, 0x166, 0x5b, 0x1b2) + _0x1c985e(0x26a, 0x1c1, 0x141, 0xfc, 0x27c) + _0x39049b(0xa, 0x113, 0x180, 0x8f, 0xa4) + _0x135656(0x3d5, 0x3ef, 0x325, 0x2d2, 0x32a) + _0x39049b(0x1ed, 0x240, 0x289, 0x299, 0x16f) + _0xfc290b(0x213, 0x1be, 0x177, 0x161, 0x180) + _0x2fd040(0x9b, 0x13b, 0x1c8, 0x22b, 0x186) + _0x39049b(0x15d, 0x99, -0x7, 0x1ce, 0xa0) + _0x39049b(0x1be, 0x96, 0x1e3, 0xcf, 0x13d) + _0x39049b(-0x122, -0x5a, 0x109, 0x6d, -0x4a) + '\x0a\x0a') + (_0xfc290b(-0x4, -0x128, -0xc5, 0x7e, -0x9b) + _0x1c985e(0x1cd, 0x22e, 0x188, 0x2da, 0x310) + _0x2fd040(0x296, 0x263, 0x240, 0x197, 0x283) + _0x39049b(0x39, -0x193, 0xd, -0x70, -0x46) + _0xfc290b(0x129, 0x177, -0x2d, 0x9e, 0xdd) + '*\x0a') + (_0xfc290b(0x20a, 0x23c, 0x13c, 0x2d7, 0x22a) + _0x39049b(-0x7f, 0x5b, -0x3a, 0x110, -0x27) + _0x1c985e(0x2fb, 0x28c, 0x3ec, 0x2ef, 0x220) + _0x135656(0x3d5, 0x495, 0x41f, 0x37b, 0x49d) + _0xfc290b(0x1c7, 0x72, 0x2ca, 0x9d, 0x2dd) + _0x39049b(-0x96, 0x1a, 0x46, 0x16, -0x29) + _0x1c985e(0x34e, 0x350, 0x275, 0x2ed, 0x439) + _0x2fd040(0x2b2, 0x43e, 0x2be, 0x43c, 0x30a) + _0x1c985e(0x35d, 0x346, 0x31c, 0x2df, 0x48c) + _0x39049b(0x289, 0x262, 0x23b, 0x257, 0x1f8) + _0x135656(0x381, 0x34a, 0x24a, 0x23b, 0x411) + _0x39049b(0x1aa, 0x156, 0x29, 0x1a1, 0xf8) + _0x135656(0x37f, 0x372, 0x413, 0x414, 0x241)) + (_0x2fd040(0x8e, 0x152, 0x98, 0x1e1, 0x106) + _0x39049b(-0x4d, 0x7a, 0xfe, 0x15e, 0x46) + _0x135656(0x547, 0x4f7, 0x667, 0x48a, 0x455) + _0x1c985e(0xf5, 0x1d3, 0xe3, 0x138, 0xe0) + _0xfc290b(0xc, -0x10f, 0x115, 0x41, -0x57) + '\x0a') + (_0x39049b(0xbb, 0x2a9, 0x24e, 0x28b, 0x1b2) + _0xfc290b(0x31, 0x117, -0x2b, -0x121, 0xd) + _0x1c985e(0x153, 0x28c, 0x3d9, 0x3a1, 0x1f2) + _0xfc290b(0x7, -0x9f, -0xdc, 0x5, 0x40) + _0x1c985e(0x2ae, 0x357, 0x37b, 0x373, 0x437) + _0x135656(0x527, 0x56b, 0x65d, 0x479, 0x4a7) + _0x1c985e(0xb3, 0x137, 0x6e, 0x107, 0xf8) + _0x1c985e(0x311, 0x384, 0x355, 0x48d, 0x3c7) + _0x39049b(0x124, 0xdc, 0xef, -0x16, 0xff) + _0x135656(0x5a9, 0x6c9, 0x459, 0x448, 0x572) + _0x2fd040(0x108, 0x1e8, 0x2d, 0x1b7, 0x16c)) + (_0x1c985e(0x243, 0x18c, 0x9e, 0x271, 0x195) + _0x39049b(-0xde, -0xe5, 0x5f, -0x72, 0x46) + _0x39049b(0xef, 0x252, 0x210, 0x186, 0x121) + _0xfc290b(0xd4, 0x36, 0x1c, 0xa3, 0x1dd) + '\x0a') + (_0x2fd040(0x3d4, 0x364, 0x357, 0x3e2, 0x314) + _0x1c985e(0x214, 0x1c1, 0x106, 0x128, 0x210) + _0x2fd040(0x24f, 0x285, 0x2f4, 0x1bd, 0x206) + _0xfc290b(0x7, 0xde, 0x9, 0xb1, 0x3) + _0x39049b(0x142, 0x23e, 0x2ce, 0xe9, 0x16f) + _0x135656(0x59a, 0x536, 0x457, 0x606, 0x628) + _0x39049b(0x1b4, 0x67, 0xcd, 0x12, 0xab) + _0x2fd040(0xab, 0xc8, 0x12d, 0x29, 0xe1) + _0x2fd040(0x1de, 0x267, 0x1fc, 0x276, 0x173) + _0x39049b(0x133, 0x6d, -0x14, 0xfd, 0x96) + _0x2fd040(0x31c, 0x3be, 0x399, 0x2e7, 0x2f9)) + (_0x1c985e(0x257, 0x18c, 0x259, 0x2a, 0x257) + _0x2fd040(0x114, 0xdd, 0xd1, 0x67, 0x1a8) + _0xfc290b(0x179, 0x4e, 0x152, 0x1ef, 0x29f) + _0x2fd040(0x143, 0x309, 0x256, 0x228, 0x1c5) + _0x135656(0x454, 0x5ae, 0x364, 0x4f7, 0x4be) + '\x0a') + (_0xfc290b(0x20a, 0xb3, 0x30e, 0x116, 0xe9) + _0x1c985e(0xec, 0x1c1, 0x1bb, 0xfd, 0x261) + _0x1c985e(0x337, 0x28c, 0x31f, 0x326, 0x3d1) + _0x39049b(0x42, 0xa0, -0x8d, -0xb, 0x56) + _0x2fd040(0x139, 0x22b, 0x34d, 0x1a5, 0x253) + _0x1c985e(0x406, 0x36b, 0x38e, 0x467, 0x278) + _0x1c985e(0x315, 0x32f, 0x40d, 0x29c, 0x40d) + _0x1c985e(0x105, 0x23f, 0x129, 0x308, 0x1f0) + _0x39049b(0x102, 0x1d0, 0x6d, 0x158, 0x176)) + (_0x39049b(0xe5, 0xa6, -0x98, -0x44, -0x5c) + _0x135656(0x46c, 0x3ad, 0x419, 0x555, 0x3de) + _0x1c985e(0x410, 0x309, 0x308, 0x446, 0x3a1) + _0x39049b(0x19a, 0x7b, 0x85, 0x127, 0xaa) + _0x2fd040(0x199, 0xa2, 0x183, 0x258, 0x1b5)) + (_0xfc290b(0x20a, 0x324, 0x2ba, 0x20b, 0x2e5) + _0x2fd040(0x1e6, -0x27, 0x139, 0x96, 0x13b) + _0x2fd040(0xca, 0xad, 0x168, 0x241, 0x206) + _0xfc290b(0x7, 0x3b, -0xc6, -0x8c, 0x150) + _0x1c985e(0x491, 0x357, 0x43d, 0x4ab, 0x3b8) + _0x39049b(-0x2f, 0x9c, -0x18f, -0xe4, -0x9e) + _0x39049b(0x160, 0x1a9, 0x28b, 0x66, 0x19c) + _0x135656(0x525, 0x416, 0x572, 0x677, 0x515) + _0x135656(0x381, 0x2f6, 0x438, 0x390, 0x2cc) + _0x135656(0x51e, 0x5df, 0x674, 0x645, 0x44c) + _0xfc290b(-0x4f, 0x91, 0xc9, -0xfd, 0xc6)) + (_0x39049b(0x96, -0x71, 0x39, -0xf4, -0x5c) + _0x2fd040(0x2ec, 0x12b, 0x152, 0x10d, 0x1a8) + _0x135656(0x547, 0x503, 0x4bc, 0x42b, 0x66d) + _0xfc290b(0x58, 0x79, 0x12e, 0x5b, -0x8c) + _0x2fd040(0x2e4, 0x296, 0x228, 0x3cf, 0x318)) + (_0x1c985e(0x2fd, 0x39a, 0x49e, 0x306, 0x371) + _0xfc290b(0x31, -0x19, -0x62, 0x10f, 0x12e) + _0x1c985e(0x349, 0x28c, 0x1f6, 0x1fd, 0x21c) + _0xfc290b(0x14d, -0xd, 0x20d, 0x2af, 0xe8) + _0x2fd040(0x18d, 0x114, 0x11a, 0x116, 0x113) + _0x1c985e(0x39d, 0x353, 0x276, 0x24d, 0x41e) + _0x1c985e(0x322, 0x379, 0x36b, 0x2b5, 0x33c) + _0x135656(0x499, 0x4d6, 0x494, 0x451, 0x52e) + _0x39049b(0x6b, 0x18a, 0x188, -0x39, 0xf8) + _0x1c985e(0xcc, 0x141, 0xaa, 0x18b, 0x92)) + (_0x2fd040(0x1f1, 0x236, 0x6c, 0x40, 0x106) + _0x2fd040(0x1f2, 0x14b, 0x1c4, 0x194, 0x1a8) + _0x1c985e(0x207, 0x286, 0x201, 0x1be, 0x1b6) + _0xfc290b(0x180, 0x15d, 0x1e1, 0x2e1, 0x297) + _0x2fd040(0x2a9, 0x1f9, 0x2b3, 0x296, 0x2f8)) + (_0x135656(0x5d8, 0x580, 0x572, 0x735, 0x549) + _0x2fd040(0x8b, 0x1f1, 0x14c, 0x72, 0x13b) + _0x135656(0x4ca, 0x526, 0x558, 0x4e6, 0x549) + _0x2fd040(0x34c, 0x219, 0x1c2, 0x15b, 0x257) + _0x2fd040(0x258, 0x70, 0x224, 0x279, 0x113) + _0xfc290b(0x25e, 0x2ee, 0x124, 0x24a, 0xfb) + _0xfc290b(0x180, 0x28f, 0x1b9, 0x2a5, 0xf1) + _0xfc290b(0x15a, 0x132, 0x17b, 0x71, 0x252) + _0xfc290b(-0x13, -0xba, 0x8, 0x2a, 0x104) + _0x135656(0x4a0, 0x4d2, 0x506, 0x554, 0x558) + _0x1c985e(0x344, 0x27e, 0x3be, 0x12f, 0x203) + _0x39049b(0xac, 0x232, 0x267, 0x53, 0x197)) + (_0xfc290b(-0x4, 0x14, -0x24, -0x11, -0x166) + _0xfc290b(0x9e, -0x4d, 0x201, 0x17e, 0x137) + _0x135656(0x535, 0x5fe, 0x458, 0x43f, 0x522) + _0x2fd040(0xbb, 0x283, 0x13f, 0x13b, 0x1e3) + '\x0a') + (_0x135656(0x5d8, 0x6d9, 0x5eb, 0x65a, 0x708) + _0x2fd040(0x59, 0x98, 0x19f, 0x17e, 0x13b) + _0xfc290b(0xfc, 0x229, 0xea, 0x20c, 0x82) + _0x135656(0x51b, 0x5d4, 0x658, 0x3fb, 0x410) + _0xfc290b(0x9, 0x167, -0xa5, -0x154, 0x0) + _0x135656(0x5e7, 0x5ae, 0x482, 0x572, 0x609) + _0x39049b(-0xaa, -0x5b, -0x66, 0xa2, 0x5e) + _0x1c985e(0x34f, 0x30d, 0x447, 0x2b3, 0x1aa) + _0xfc290b(-0x24, -0x9f, -0xfb, -0xb4, -0xc8) + _0x39049b(0x130, 0x14c, 0x104, 0x13b, 0x129) + _0x1c985e(0x371, 0x27e, 0x371, 0x17b, 0x226) + _0x135656(0x5bd, 0x49e, 0x5f9, 0x4c9, 0x574)) + (_0x39049b(0xc0, -0x56, -0x1b7, -0x99, -0x5c) + _0x39049b(0x109, -0xdc, -0x6c, 0xa0, 0x46) + _0x135656(0x56f, 0x4fb, 0x666, 0x5e5, 0x572) + _0x135656(0x5fa, 0x5aa, 0x70c, 0x670, 0x4db) + _0x1c985e(0x2a5, 0x365, 0x3c3, 0x3de, 0x40e)) + (_0xfc290b(0x20a, 0x2f5, 0xce, 0xb1, 0xd8) + _0xfc290b(0x31, 0x14d, 0x4b, -0xf4, 0x152) + _0xfc290b(0xfc, 0x118, 0x1cd, 0x228, 0x91) + _0x135656(0x51b, 0x3fa, 0x5fb, 0x517, 0x664) + _0xfc290b(0x9, -0xea, 0x109, 0x9, 0x48) + _0x2fd040(0x275, 0x101, 0x25b, 0xae, 0x140) + _0x135656(0x5fa, 0x73c, 0x633, 0x62e, 0x6b9) + _0x1c985e(0x3d7, 0x34c, 0x243, 0x3a2, 0x48c) + _0x39049b(0x101, 0x178, 0x103, 0x128, 0x125) + _0x2fd040(0xa8, 0xcb, 0x114, 0x21e, 0xe6) + _0x2fd040(0x1e8, 0x162, 0x2ee, 0x316, 0x28b) + _0x39049b(0x72, 0xe, -0x4d, 0xd3, 0x96) + _0x2fd040(0x260, 0x410, 0x285, 0x229, 0x2f9)) + (_0x39049b(0x30, 0x98, 0x11, -0x11e, -0x5c) + _0x135656(0x46c, 0x3a7, 0x596, 0x3cc, 0x38a) + _0x135656(0x4be, 0x546, 0x397, 0x433, 0x44a) + _0x135656(0x492, 0x4c5, 0x433, 0x5f0, 0x461)) + (_0x1c985e(0x2ae, 0x39a, 0x409, 0x4fc, 0x39c) + _0x39049b(0xf3, -0xeb, -0x74, -0x70, -0x27) + _0x1c985e(0x351, 0x28c, 0x29c, 0x13c, 0x28f) + _0x135656(0x51b, 0x4fb, 0x416, 0x654, 0x4fc) + _0xfc290b(0x9, -0x15a, -0x6e, -0x4e, 0x145) + _0xfc290b(0x23a, 0x1a8, 0x1e1, 0x388, 0x2ae) + _0x2fd040(0x1b2, 0x127, 0x195, 0x185, 0x1f1) + _0x1c985e(0x2b1, 0x26c, 0x288, 0x17d, 0x26f) + _0x135656(0x542, 0x68f, 0x4bc, 0x4b5, 0x697) + _0x1c985e(0x4c3, 0x3f1, 0x54a, 0x3de, 0x327) + _0x1c985e(0x22a, 0x36b, 0x36d, 0x26c, 0x20c) + _0xfc290b(0x62, 0x4a, -0xc8, 0x99, 0x183)) + (_0x39049b(0xbf, -0x4e, -0x26, -0xaa, -0x5c) + _0x39049b(-0x24, -0x80, 0xf7, 0x18, 0x46) + _0x39049b(0x2c2, 0x2f2, 0x337, 0x1b9, 0x1db) + _0xfc290b(0x3f, 0xb4, 0x9b, 0xa5, 0x2b) + _0x39049b(0x10b, 0x150, 0x149, 0x133, 0x19) + '*\x0a') + (_0x135656(0x5d8, 0x596, 0x5f7, 0x4c2, 0x4d5) + _0x1c985e(0x162, 0x1c1, 0x20f, 0xf1, 0xf1) + _0xfc290b(0xfc, 0x11c, 0xeb, 0x127, 0x90) + _0xfc290b(0x14d, 0x223, 0x2a9, 0x36, 0x22e) + _0x1c985e(0x165, 0x199, 0x17b, 0x174, 0x76) + _0x135656(0x5a2, 0x5d9, 0x638, 0x689, 0x544) + _0xfc290b(0xb, 0x132, -0x2e, 0xa2, 0xe9) + _0x39049b(0x11c, -0xec, 0x90, -0x13d, 0x14) + _0x39049b(-0x42, -0x3d, -0xad, 0x44, -0x74) + _0x2fd040(-0x87, -0x41, 0xca, 0x27, 0xbd) + _0x39049b(-0xca, 0x12c, 0x2, 0x111, 0x2) + _0x2fd040(0x11c, 0x1e2, 0x13f, 0xc2, 0x166) + _0x2fd040(0x37e, 0x324, 0x1e8, 0x222, 0x2e5) + _0xfc290b(0x62, 0xdb, 0x1b7, -0x1b, 0x186)) + (_0xfc290b(-0x4, -0x7, 0x9, 0x131, 0xb9) + _0xfc290b(0x9e, 0x9, 0x49, 0x1d1, 0x97) + _0x2fd040(0x361, 0x165, 0x2c1, 0x2e2, 0x282) + _0x2fd040(0x19c, 0x23a, 0x2fa, 0x18b, 0x1e9) + _0x39049b(0x67, 0x51, 0x91, -0x11a, 0x41)) + (_0x1c985e(0x400, 0x39a, 0x29c, 0x3f9, 0x3fc) + _0xfc290b(0x31, 0x55, -0x7a, 0x99, -0x23) + _0xfc290b(0xfc, -0x4f, -0x26, 0x11e, 0x98) + _0x2fd040(0x2a6, 0x12d, 0x377, 0x1cc, 0x257) + _0x1c985e(0x263, 0x199, 0x222, 0x18f, 0x5f) + _0x2fd040(0x214, 0x1c6, 0x2f3, 0x63, 0x1bb) + _0x135656(0x522, 0x3d2, 0x653, 0x53a, 0x602) + _0x1c985e(0x44a, 0x38f, 0x4cc, 0x485, 0x23a) + _0xfc290b(0x87, 0x3c, 0x1b4, 0x154, 0x15c) + _0x2fd040(0x287, 0x262, 0x29f, 0x23f, 0x1cb) + _0x135656(0x5a9, 0x50f, 0x45b, 0x471, 0x647) + _0x1c985e(0xb9, 0x1f2, 0x2a8, 0x254, 0x101)) + (_0x1c985e(0x134, 0x18c, 0x153, 0x2ca, 0x248) + _0x2fd040(0x117, 0x5f, 0x210, 0x6b, 0x1a8) + _0xfc290b(0x179, 0x83, 0x26c, 0x9b, 0x1e5) + _0xfc290b(0x1d9, 0x2ba, 0x113, 0x2fb, 0x2d3) + '\x0a') + (_0xfc290b(0x20a, 0x12b, 0x1fa, 0x1cd, 0x27b) + _0x2fd040(0x18d, 0x18d, 0x181, 0x9a, 0x13b) + _0xfc290b(0xfc, 0xa0, -0xc, -0x49, 0x27) + _0x2fd040(0xf7, 0x159, 0x174, 0x19e, 0x146) + _0x2fd040(0x353, 0x4a7, 0x2a3, 0x208, 0x34b) + _0x2fd040(-0x56, 0x1ba, 0x13, -0x7, 0xe8) + _0x1c985e(0x37f, 0x311, 0x3a5, 0x3cc, 0x441) + _0x135656(0x5f1, 0x5ec, 0x6b4, 0x58d, 0x5df) + _0x2fd040(0x2e3, 0x189, 0x332, 0x390, 0x2a4) + _0x39049b(-0xbd, 0x138, 0x16, -0x59, 0x17) + _0xfc290b(0x1c1, 0x22f, 0x13f, 0x2c3, 0x93) + _0x1c985e(0x104, 0x258, 0x3ac, 0x254, 0x1ce) + '\x0a') + (_0xfc290b(-0x4, 0x3f, -0x4c, 0x157, 0xa9) + _0x39049b(0xcb, 0x2e, 0x31, 0x1e, 0x46) + _0x2fd040(0x27c, 0x147, 0x278, 0x131, 0x283) + _0x1c985e(0x22d, 0x297, 0x30a, 0x2c1, 0x13b) + _0xfc290b(0x249, 0x1be, 0x1b6, 0x304, 0x14e) + '\x0a') + (_0x135656(0x5d8, 0x4a7, 0x579, 0x738, 0x4f8) + _0x2fd040(0x101, 0x13f, 0x184, 0xc1, 0x13b) + _0x39049b(0x12b, 0x4e, -0x56, -0xd, 0xa4) + _0x39049b(0x2e9, 0x279, 0xc7, 0x97, 0x1df) + _0x1c985e(0xb9, 0x160, 0x154, 0x48, 0x8a) + _0x2fd040(0x23a, 0x441, 0x488, 0x3e2, 0x368) + _0xfc290b(0x9b, 0x163, 0x11e, 0x2e, -0xb2) + _0x1c985e(0x46d, 0x3ea, 0x492, 0x451, 0x4bc) + _0x39049b(0x67, -0x25, -0xed, 0x10c, 0x78) + _0x135656(0x4a4, 0x354, 0x4bb, 0x446, 0x5e4) + _0x39049b(0x238, 0xa6, 0x114, 0x275, 0x152)) + (_0x1c985e(0x243, 0x18c, 0x165, 0xf8, 0xf0) + _0x39049b(0xf8, -0xd6, 0x1ac, 0xac, 0x46) + _0xfc290b(0x179, 0xef, 0xef, 0x68, 0x1e9) + _0x39049b(0x1fd, 0x32b, 0x254, 0xd2, 0x1e1) + _0x39049b(-0x9a, 0xe9, 0x172, -0xbe, 0x2e) + '\x0a') + (_0x39049b(0x69, 0xa6, 0x2f6, 0x149, 0x1b2) + _0x135656(0x3ff, 0x2ca, 0x305, 0x34e, 0x414) + _0x1c985e(0x2a9, 0x28c, 0x1da, 0x254, 0x3d1) + _0xfc290b(0xae, 0x12, 0xd, 0x1ad, 0x1e6) + _0x39049b(0x1f5, 0x17c, -0x13, 0x21f, 0xf1) + _0x1c985e(0x2bd, 0x17d, 0x1ef, 0xe6, 0x69) + _0x2fd040(0x1e8, -0x88, 0x4f, -0x18, 0xb5) + _0x135656(0x47d, 0x4b9, 0x4c4, 0x3d5, 0x45f) + _0xfc290b(0x1ce, 0x2fc, 0xda, 0x128, 0x2c6)) + (_0x39049b(-0x2d, -0x188, -0x2e, -0x118, -0x5c) + _0x39049b(0xfb, 0xac, 0x4a, 0x58, 0x46) + _0x2fd040(0x348, 0x299, 0x2b5, 0x147, 0x283) + _0x1c985e(0x98, 0x1fe, 0x307, 0x2c2, 0x2bf) + _0xfc290b(0x3b, 0x168, 0x134, 0x81, 0x2e)) + (_0x39049b(0x2fa, 0x194, 0x21f, 0x2ad, 0x1b2) + _0x39049b(0x8f, 0x1c, 0xc4, -0x6c, -0x27) + _0x135656(0x4ca, 0x3c6, 0x3d1, 0x556, 0x40b) + _0x2fd040(0x37f, 0x251, 0x226, 0x3ab, 0x245) + _0x135656(0x517, 0x64a, 0x525, 0x618, 0x4ed) + _0x1c985e(0x93, 0x17d, 0x7e, 0x1eb, 0x2e0) + _0x39049b(-0x16, 0x1cd, -0x4, 0x1a5, 0x112) + _0x39049b(0x182, 0x166, 0x162, 0x51, 0x52) + _0x2fd040(0xa3, 0x63, 0x2b, 0x177, 0x18e) + _0x2fd040(0xcc, 0x2fb, 0x2f2, 0x1e4, 0x213) + _0x2fd040(0xd8, 0xdf, 0x14f, -0xa0, 0xbb)) + (_0x135656(0x3ca, 0x2d9, 0x2d8, 0x2f4, 0x3b2) + _0x39049b(0x26, 0xdd, -0x21, -0x85, 0x46) + _0x2fd040(0x192, 0x31b, 0x2e6, 0x26a, 0x2dd) + _0xfc290b(0x74, 0xd2, 0x188, -0x16, 0x1af) + '\x0a') + (_0x135656(0x5d8, 0x6ae, 0x675, 0x706, 0x62c) + _0x1c985e(0x1fe, 0x1c1, 0x278, 0x1ee, 0x75) + _0x39049b(0x0, 0x1c7, 0xed, 0x152, 0xa4) + _0x135656(0x509, 0x571, 0x3f9, 0x588, 0x635) + _0x135656(0x517, 0x4c5, 0x56d, 0x56d, 0x4f2) + _0x39049b(-0xcb, 0xef, -0x1e, -0xf0, -0x6b) + _0xfc290b(0x1b9, 0x145, 0x9d, 0x116, 0x134) + _0x2fd040(0x8e, 0x53, -0x1d, 0x16, 0xdd) + _0x1c985e(0x31a, 0x354, 0x36d, 0x41c, 0x418) + _0x135656(0x60a, 0x603, 0x5bd, 0x724, 0x75d)) + (_0x39049b(0xf8, 0xc5, -0x163, 0x8a, -0x5c) + _0x39049b(0x124, -0x1c, -0x8, -0x11f, 0x46) + _0x135656(0x5df, 0x64e, 0x6ef, 0x66a, 0x58f) + _0xfc290b(0x1ab, 0x1c7, 0x117, 0xf8, 0x1b4) + '\x0a') + (_0xfc290b(0x20a, 0x2ea, 0x21a, 0x150, 0xbb) + _0x2fd040(0x22c, 0x7c, 0xb, 0x11c, 0x13b) + _0x1c985e(0x3d7, 0x28c, 0x2d0, 0x3ac, 0x293) + _0x39049b(0x7a, 0x127, 0x1ec, 0x107, 0xe3) + _0x1c985e(0x3c2, 0x2d9, 0x3ab, 0x19c, 0x367) + _0xfc290b(-0x13, 0x77, 0x10d, -0x123, -0x145) + _0xfc290b(0x229, 0xf0, 0x2a3, 0x31c, 0x2ce) + _0x1c985e(0x255, 0x2c6, 0x37b, 0x328, 0x372) + _0x1c985e(0x44a, 0x345, 0x2dc, 0x234, 0x30c) + _0x2fd040(0x1a6, -0x82, 0x4d, -0x87, 0xbb)) + (_0x1c985e(0x28c, 0x18c, 0x2e2, 0xa8, 0x122) + _0xfc290b(0x9e, 0x120, 0x1c6, 0x68, -0xbe) + _0x39049b(0x214, -0x4, 0x1e7, 0x20b, 0x121) + _0x135656(0x444, 0x386, 0x58b, 0x588, 0x33a) + _0xfc290b(0x15c, 0x1b9, 0x1c6, 0x48, 0x8b)) + (_0xfc290b(0x20a, 0x2e2, 0x30a, 0x2e9, 0xc1) + _0x2fd040(0x253, 0xb5, 0xc5, 0x218, 0x13b) + _0x39049b(0x2d, 0x209, 0x70, 0x123, 0xa4) + _0x1c985e(0x29f, 0x3c8, 0x412, 0x4e1, 0x507) + _0x2fd040(0x1d8, 0x15d, 0x15c, 0xf3, 0x256) + _0x1c985e(0x330, 0x1ea, 0x329, 0x1e4, 0x193) + _0x39049b(-0x85, -0x6, -0x1b2, -0x145, -0x71) + _0x2fd040(0x8b, 0x10a, 0x22a, 0xf0, 0x105) + _0x2fd040(0x96, 0x1f7, 0x1dd, 0x1e8, 0xc0) + '\x0a\x0a') + (_0x39049b(0xb1, -0xac, 0x64, -0x75, -0x5c) + _0x1c985e(0x338, 0x22e, 0x12c, 0xdf, 0x209) + _0xfc290b(-0x42, -0xd1, -0x67, 0xa9, 0x54) + _0x135656(0x5b9, 0x6dd, 0x675, 0x5d3, 0x5e7) + _0x135656(0x479, 0x479, 0x5a3, 0x324, 0x547)) + (_0x1c985e(0x433, 0x39a, 0x4b3, 0x2ef, 0x23f) + _0xfc290b(0x31, 0xd7, -0x5f, 0x32, -0x6c) + _0x39049b(0x1eb, 0x113, -0x3c, -0x4a, 0xa4) + _0x39049b(0x1a, 0x74, -0x39, 0xd6, -0x51) + _0x2fd040(0x1fe, 0x20b, 0x197, 0x40c, 0x2d1) + _0x2fd040(0x278, 0x1a2, 0x177, 0x290, 0x2d6) + _0xfc290b(0x103, 0x21d, 0x39, 0x202, 0xac) + _0x39049b(0xcd, 0xa6, -0x199, -0x15, -0x81) + _0x2fd040(0x1ae, 0x8d, 0x87, 0x1c5, 0x173) + _0xfc290b(-0x6, -0x60, -0x58, 0x159, -0x105) + _0x135656(0x40f, 0x2c1, 0x378, 0x358, 0x55f)) + (_0xfc290b(-0x4, -0x100, 0xfb, 0x8e, -0x74) + _0x1c985e(0x2bd, 0x22e, 0x1d2, 0x1e3, 0x139) + _0x2fd040(0x400, 0x38d, 0x3a5, 0x2d5, 0x33d) + _0x39049b(-0x135, -0xda, -0x1b1, -0x9f, -0x60) + _0x2fd040(0x383, 0x462, 0x471, 0x34f, 0x34a) + _0x2fd040(0x2cf, 0x28b, 0x10a, 0x2d0, 0x1b5)) + (_0x135656(0x5d8, 0x47d, 0x5bc, 0x486, 0x6b1) + _0x1c985e(0x267, 0x1c1, 0x240, 0x28d, 0x183) + _0x2fd040(0x162, 0x19e, 0x319, 0x2d2, 0x206) + _0x2fd040(0xa3, 0x16a, 0x146, 0x190, 0x111) + _0x39049b(0x85, 0x158, 0x26d, 0xf3, 0x16f) + _0x2fd040(0xb1, 0x25d, 0x91, 0x31b, 0x1d3) + _0x1c985e(0x1f3, 0x161, 0x118, 0x7f, 0x291) + _0x2fd040(0x14d, 0x2ef, 0x231, 0x2cd, 0x218) + _0x2fd040(0x402, 0x40b, 0x27b, 0x237, 0x356) + _0xfc290b(0xe, -0xe6, -0xd2, 0x139, 0x11d) + '\x0a\x0a') + (_0x1c985e(0x10a, 0x18c, 0x202, 0x164, 0xc4) + _0x1c985e(0x2dc, 0x22e, 0x1dd, 0x1d2, 0x1d7) + _0x1c985e(0x366, 0x2d1, 0x206, 0x42e, 0x256) + _0x2fd040(0xda, 0x137, 0xb1, 0x11e, 0x1bd) + _0x2fd040(0x9d, 0x15b, 0x161, 0x166, 0x1a7)) + (_0x39049b(0xf6, 0x20b, 0x21d, 0x60, 0x1b2) + _0x135656(0x3ff, 0x4f6, 0x488, 0x3d1, 0x391) + _0x1c985e(0x1c2, 0x28c, 0x2c2, 0x35a, 0x2bd) + _0x39049b(-0x2d, -0xe3, -0x15, -0xb9, -0x51) + _0x2fd040(0x3bb, 0x434, 0x3a5, 0x2b6, 0x2d1) + _0x39049b(-0xdb, 0x16, 0x34, 0xa4, -0x9e) + _0x135656(0x5c2, 0x4e7, 0x65d, 0x6a7, 0x5d0) + _0xfc290b(0x157, 0x179, 0x10a, 0x198, 0x145) + _0xfc290b(-0x4d, 0xcc, 0x2b, -0xa, -0x7a) + _0x1c985e(0x2d4, 0x353, 0x481, 0x2b8, 0x3e6) + _0xfc290b(-0x4f, -0x1b, -0x1b, 0xea, 0xa5)) + (_0x2fd040(0x64, 0xf0, -0x3, 0x141, 0x106) + _0x1c985e(0x318, 0x22e, 0x27d, 0x1f1, 0x35a) + _0x2fd040(0x14c, 0x28c, 0x1cf, 0x121, 0x24b) + _0x39049b(-0x56, -0x190, -0x9f, -0x1c, -0x9f) + _0x1c985e(0x2b7, 0x3d0, 0x2cb, 0x4d4, 0x474) + _0x135656(0x479, 0x5ba, 0x539, 0x524, 0x362)) + (_0xfc290b(0x20a, 0x345, 0x12c, 0xdd, 0x2aa) + _0x2fd040(0x1ea, 0x4a, 0x76, 0x12a, 0x13b) + _0x39049b(0x1c7, -0x93, 0x114, 0x1f7, 0xa4) + _0x135656(0x509, 0x4b7, 0x4e7, 0x3f3, 0x625) + _0x135656(0x517, 0x4a6, 0x491, 0x501, 0x43c) + _0x1c985e(0x213, 0x17f, 0xed, 0x226, 0x1fe) + _0x135656(0x37b, 0x2d9, 0x2d4, 0x262, 0x4c4) + _0x135656(0x482, 0x433, 0x355, 0x5b9, 0x37f) + '\x0a\x0a') + (_0x39049b(-0xe3, -0xa6, 0x59, -0x9f, -0x5c) + _0x135656(0x46c, 0x3b6, 0x4e1, 0x415, 0x4bc) + _0x39049b(0x2b, -0x53, -0xea, -0x17d, -0x9a) + _0x1c985e(0x4be, 0x3b7, 0x4a8, 0x4a9, 0x29c) + _0x1c985e(0x2d1, 0x22d, 0x299, 0x2a6, 0x30b)) + (_0x1c985e(0x41f, 0x39a, 0x39e, 0x465, 0x40b) + _0xfc290b(0x31, 0x6e, -0x37, -0xed, 0xb3) + _0x135656(0x4ca, 0x543, 0x59f, 0x5e9, 0x410) + _0x2fd040(0x225, 0x1f6, 0x1ea, 0x35f, 0x2af) + _0x135656(0x517, 0x5e1, 0x507, 0x5f8, 0x5ad) + _0x135656(0x465, 0x3f2, 0x596, 0x441, 0x508) + _0x1c985e(0x2ae, 0x314, 0x42a, 0x2dd, 0x45c) + _0x1c985e(0x309, 0x1b0, 0x255, 0x237, 0x232) + _0xfc290b(0x98, 0x1ed, 0x19, 0x3b, -0x4) + _0x2fd040(0x397, 0x3fb, 0x22c, 0x263, 0x36f) + '\x0a\x0a') + (_0x1c985e(0x1ca, 0x18c, 0x24f, 0x1b7, 0x2f2) + _0x2fd040(0x222, 0x2e9, 0x180, 0xbd, 0x1a8) + _0xfc290b(-0x3, 0xb, 0x75, -0xb2, 0x88) + _0x2fd040(0x29e, 0x3e4, 0x406, 0x429, 0x371) + _0x135656(0x46b, 0x482, 0x3db, 0x543, 0x331)) + (_0x1c985e(0x303, 0x39a, 0x3a1, 0x2a5, 0x35a) + _0x2fd040(0x102, 0x1d6, 0x275, 0x26e, 0x13b) + _0xfc290b(0xfc, 0x11b, 0x42, 0xb6, 0x19c) + _0xfc290b(0x7, -0xb5, 0x150, -0x2, -0x28) + _0x39049b(0x32, 0x1cb, 0xa1, 0x10f, 0x18e) + _0xfc290b(0x23, -0xed, -0x49, -0x6f, 0xae) + _0x135656(0x44a, 0x513, 0x36b, 0x467, 0x40b) + _0x1c985e(0x30e, 0x288, 0x242, 0x3c3, 0x356) + _0x39049b(0x35, -0x15, -0x123, -0x100, 0x40) + _0x2fd040(0x2d6, 0x450, 0x231, 0x24e, 0x36f) + '\x0a\x0a') + (_0x1c985e(0x22f, 0x18c, 0x203, 0x207, 0x28) + _0x2fd040(0x1ce, 0x141, 0x123, 0x2e3, 0x1a8) + _0x135656(0x53c, 0x613, 0x520, 0x3f5, 0x58e) + _0x39049b(0x179, -0x3f, 0x129, -0x3a, 0x6f) + _0xfc290b(0x2d, -0x70, 0xa4, -0x6f, 0xc0) + _0x135656(0x5dc, 0x6ef, 0x5c1, 0x64f, 0x6a0)) + (_0xfc290b(0x20a, 0x1ba, 0x2a6, 0x13d, 0x151) + _0x1c985e(0x2b0, 0x1c1, 0x192, 0x108, 0x81) + _0x39049b(0x13f, 0xe2, 0x8c, 0xfe, 0xa4) + _0x2fd040(0x170, 0x96, 0x1a5, 0xd4, 0x111) + _0x135656(0x595, 0x62f, 0x6f0, 0x6ea, 0x62d) + _0x135656(0x3fd, 0x4c8, 0x338, 0x4fc, 0x4a1) + _0x1c985e(0x38d, 0x350, 0x42e, 0x261, 0x23b) + _0x2fd040(0x401, 0x296, 0x3ac, 0x2e4, 0x30a) + _0x135656(0x584, 0x6e3, 0x605, 0x61e, 0x6bc) + _0x2fd040(0x2e2, 0x2e9, 0x283, 0x28a, 0x35a) + _0x1c985e(0x1a7, 0x143, 0xc5, 0x66, 0x182) + _0x39049b(0x6d, 0x157, 0x167, 0xb1, 0x16b) + _0x135656(0x37f, 0x2e9, 0x482, 0x4be, 0x33b)) + (_0x1c985e(0x159, 0x18c, 0x1b8, 0x140, 0x41) + _0x39049b(-0x4f, 0x120, -0x58, 0x67, 0x46) + _0x2fd040(0x39b, 0x22b, 0x386, 0x401, 0x2ea) + _0x1c985e(0x38c, 0x347, 0x3aa, 0x237, 0x3b7) + _0xfc290b(0x1eb, 0x1a8, 0xe2, 0x1cf, 0x248) + _0x135656(0x479, 0x479, 0x4d1, 0x434, 0x557)) + (_0x39049b(0x2d5, 0x29d, 0x1ab, 0x142, 0x1b2) + _0x39049b(-0x12e, 0x111, -0x16, -0x156, -0x27) + _0xfc290b(0xfc, 0x23d, 0x14a, 0x94, 0x128) + _0x39049b(-0x70, -0x69, 0xad, -0x17a, -0x51) + _0xfc290b(0xb8, 0x1eb, -0x11, 0xd5, -0x9b) + _0x2fd040(0x285, 0x3dc, 0x371, 0x303, 0x2c1) + _0x39049b(-0xd2, 0x45, -0x33, -0x86, 0x36) + _0x2fd040(0xce, 0x1a2, 0x84, 0x22f, 0x173) + _0x2fd040(0x251, 0x128, 0x2c9, 0xb1, 0x19d) + _0x1c985e(0x1d6, 0x17f, 0x17f, 0x1f2, 0x1ef) + _0x39049b(0x8c, -0x8e, -0x67, 0xe8, 0xa)) + (_0x135656(0x3ca, 0x2dc, 0x485, 0x437, 0x3d2) + _0x135656(0x46c, 0x523, 0x50e, 0x499, 0x4ac) + _0x1c985e(0x2f1, 0x308, 0x329, 0x2c6, 0x38a) + _0x2fd040(0xa8, 0x71, 0x260, 0x19e, 0x185) + _0xfc290b(0x119, 0x82, 0x114, 0xd9, 0x7d) + '\x0a') + (_0xfc290b(0x20a, 0x246, 0x15e, 0x194, 0x229) + _0x2fd040(0x149, 0xf2, 0x167, 0xca, 0x13b) + _0x2fd040(0x15f, 0x22a, 0xbc, 0x1aa, 0x206) + _0x1c985e(0x29d, 0x27c, 0x378, 0x2b7, 0x2f4) + _0xfc290b(0x39, -0xa2, -0x11e, -0x8e, -0x105) + _0x2fd040(0x113, 0xd4, 0x162, 0x15e, 0x10b) + _0x2fd040(0xc6, 0xf9, 0x251, 0x29c, 0x168) + _0x135656(0x48c, 0x420, 0x5d9, 0x596, 0x3a3) + _0x135656(0x4f1, 0x527, 0x4db, 0x642, 0x3ae) + _0xfc290b(0x1e1, 0x200, 0x251, 0x2c3, 0x15a) + _0x1c985e(0x134, 0x15d, 0x12d, 0x1d5, 0x24c) + _0x135656(0x45a, 0x309, 0x338, 0x5ad, 0x3e8) + _0x135656(0x4e0, 0x462, 0x5ef, 0x584, 0x4ee) + _0x39049b(0xd1, 0x32, -0x79, -0x2d, 0xec) + _0x2fd040(0xa2, 0x148, 0x1fe, 0xe7, 0x188) + '\x0a\x0a') + (_0x1c985e(0x1ec, 0x18c, 0xd6, 0x263, 0x21d) + _0x135656(0x46c, 0x4c8, 0x5b1, 0x306, 0x36f) + _0x2fd040(0x169, 0x23a, 0x2d3, 0x149, 0x1fa) + _0xfc290b(0xe3, 0x13e, 0x22c, 0x132, 0x1ea) + _0x135656(0x5dc, 0x4c9, 0x4cf, 0x4ec, 0x4bd)) + (_0x39049b(0x27a, 0x60, 0x6f, 0xb8, 0x1b2) + _0x1c985e(0x25a, 0x1c1, 0x173, 0xd0, 0x1d4) + _0x1c985e(0x31b, 0x28c, 0x3bc, 0x394, 0x295) + _0x1c985e(0x13a, 0x197, 0xce, 0x2cc, 0x35) + _0x135656(0x595, 0x59c, 0x4fa, 0x44d, 0x5d4) + _0x135656(0x5e1, 0x4d7, 0x504, 0x5d0, 0x64f) + _0x39049b(0x83, 0x81, 0x9f, 0x127, 0x24) + _0x39049b(0x1f4, 0xd6, -0x99, -0x49, 0xa0) + _0x2fd040(0x2a9, 0x25e, 0x18c, 0x2ee, 0x1a2) + _0x39049b(0x183, 0x341, 0x370, 0x338, 0x20d) + '\x0a\x0a') + (_0xfc290b(0x70, -0xd6, -0xb9, 0x13, 0x1c7) + _0x1c985e(0x166, 0x249, 0x2fa, 0x1e7, 0x28b) + _0x2fd040(0x14a, 0x1aa, 0x185, 0x86, 0x1b7) + _0x39049b(0xae, 0x20a, -0x19, 0xcd, 0xfa) + _0x39049b(0x107, -0xe4, -0x59, 0x11, 0xb) + _0x39049b(0xff, 0x19c, 0x1a8, 0x1ec, 0x20c) + _0x1c985e(0x150, 0x29b, 0x31e, 0x147, 0x347) + _0x135656(0x45d, 0x3f3, 0x37e, 0x53e, 0x571) + _0x1c985e(0x300, 0x38a, 0x46e, 0x23f, 0x42a) + _0xfc290b(0x9f, 0x7b, 0xd7, -0x71, -0xa2));
function _0x2fd040(_0x2393ef, _0x3199e2, _0x2da5a6, _0xf8bcc7, _0x58c5e8) {
    return _0xe97a(_0x58c5e8 - 0x2d, _0x2393ef);
}
function _0xe97a(_0x246e17, _0xe97afb) {
    const _0x438fab = _0x246e();
    return _0xe97a = function (_0x1e72d3, _0x3d206c) {
        _0x1e72d3 = _0x1e72d3 - (0xea + -0x909 + -0x227 * -0x4);
        let _0x5b54b3 = _0x438fab[_0x1e72d3];
        return _0x5b54b3;
    }, _0xe97a(_0x246e17, _0xe97afb);
}
const sin = _0x39049b(0xe3, -0x67, -0x4d, 0x164, 0x22) + _0x135656(0x46f, 0x53b, 0x390, 0x3c4, 0x396) + _0x39049b(0x183, 0xa4, 0x22, -0xfb, 0x65) + _0x1c985e(0x115, 0x24f, 0x27d, 0x15a, 0x2af) + _0x39049b(0x1c8, 0x2fe, 0x286, 0x2c3, 0x1f5) + (_0x2fd040(0x2ef, 0x1fb, 0x25b, 0x2f8, 0x20b) + _0xfc290b(0x193, 0x175, 0x82, 0x13f, 0x1de) + _0x1c985e(0x27f, 0x363, 0x201, 0x375, 0x313) + _0xfc290b(0x175, 0x1eb, 0x19, 0x69, 0x89) + _0x135656(0x494, 0x425, 0x3ae, 0x56e, 0x410)) + (_0x39049b(0xcf, -0x23, 0x219, 0x17a, 0xed) + _0x135656(0x3e8, 0x403, 0x31f, 0x382, 0x334) + _0x1c985e(0x243, 0x2c5, 0x424, 0x2e5, 0x3bf) + _0x135656(0x4ff, 0x583, 0x5fa, 0x43e, 0x42f) + _0xfc290b(0x1da, 0x263, 0x19f, 0x22f, 0x2a1)) + (_0x39049b(0xb2, 0x16f, -0x6d, 0x1f1, 0xa9) + _0x1c985e(0x1ec, 0x323, 0x379, 0x484, 0x3e7) + _0x39049b(0x228, 0x149, 0xfa, 0x14f, 0x17b) + _0x2fd040(0x191, 0x1bc, 0x23a, 0x326, 0x27f) + _0x2fd040(0x17c, 0xc5, 0x1f8, 0x1b4, 0x1d0)) + (_0x39049b(-0x33, 0x6, -0xde, -0x2a, 0x74) + _0x39049b(-0x28, -0x111, -0x84, -0x17f, -0x25) + _0x39049b(0xe, -0xa3, 0xdc, -0xb9, -0x1) + _0x2fd040(0x169, 0x16f, 0x286, 0x2aa, 0x17f) + _0x39049b(0x251, 0x29f, 0x25f, 0x18c, 0x13a) + _0x1c985e(0x32e, 0x342, 0x2cf, 0x439, 0x320) + _0xfc290b(0xdb, 0x14d, 0x63, 0x1de, 0x8) + _0x2fd040(0x192, 0x191, 0x1bd, 0x2dd, 0x1f5) + _0x39049b(-0x32, -0x4a, -0x79, 0x32, -0x75) + _0x39049b(-0x5, 0x13d, 0x52, 0x8f, 0x8d) + '\x0a') + (_0x39049b(-0x55, 0x1df, 0xf1, 0x1f, 0xa9) + _0x135656(0x561, 0x4c9, 0x56e, 0x5e5, 0x550) + _0x1c985e(0x2d1, 0x29d, 0x23e, 0x380, 0x1f2) + _0x2fd040(0x142, -0x6, 0x1b, 0x23b, 0x11e) + '\x0a') + (_0x135656(0x49a, 0x480, 0x53d, 0x5b1, 0x55a) + _0x39049b(-0x102, -0x129, -0x78, -0x127, -0x25) + _0x2fd040(0xfd, 0x136, 0x1ac, 0xbd, 0x161) + _0x39049b(0x2e2, 0x2b1, 0x18b, 0xf4, 0x187) + _0x1c985e(0x4b2, 0x377, 0x2db, 0x400, 0x432) + _0x135656(0x3f4, 0x2f0, 0x3a6, 0x2c8, 0x2fc) + _0x39049b(0x26e, 0x1fd, -0x3, 0x47, 0x157) + '\x0a') + (_0x135656(0x4cf, 0x60f, 0x60d, 0x538, 0x4b3) + _0x135656(0x561, 0x5a3, 0x4f8, 0x601, 0x462) + _0x135656(0x5a1, 0x451, 0x6ab, 0x67c, 0x56e) + _0x2fd040(0x1de, 0x5, 0x184, 0x1c1, 0x108) + _0x39049b(0x49, 0x13, -0x12, -0x2c, 0xb7)) + (_0xfc290b(0xcc, -0x5e, 0xc2, 0xb8, 0xb3) + _0x39049b(-0x175, 0x10f, -0xda, -0x8f, -0x25) + _0x2fd040(0x9c, 0x170, 0xd2, 0x16, 0x161) + _0x39049b(0x32, 0x41, -0x9b, 0x2e, -0x73) + _0x135656(0x3dd, 0x4eb, 0x476, 0x38d, 0x4f4) + _0x1c985e(0x3a5, 0x2f8, 0x2ac, 0x1b7, 0x378) + _0xfc290b(0x173, 0x1d0, 0x2ba, 0x118, 0x22c) + _0x2fd040(0x4a6, 0x22b, 0x4a3, 0x425, 0x34d) + _0xfc290b(0x198, 0x13e, 0x2ed, 0x23d, 0x158) + '\x0a') + (_0x135656(0x4cf, 0x438, 0x3e3, 0x36c, 0x53d) + _0x135656(0x561, 0x497, 0x4cc, 0x56c, 0x402) + _0xfc290b(0xfd, 0x9f, 0x89, 0x233, -0x31) + _0xfc290b(0x1fb, 0x164, 0x232, 0x148, 0x2bc)) + (_0x2fd040(0x1ae, 0x10c, 0x2c0, 0x32a, 0x1d6) + _0x39049b(0x2c, -0x1b, 0x15, 0xf4, -0x25) + _0x39049b(-0x9f, -0x12d, -0x9c, 0xec, -0x1) + _0x135656(0x443, 0x445, 0x424, 0x4e4, 0x48c) + _0x2fd040(0x1d1, 0x331, 0x3f8, 0x318, 0x29c) + _0x135656(0x580, 0x4dd, 0x5d5, 0x616, 0x66b) + _0xfc290b(0x1a0, 0x1ad, 0x175, 0x9b, 0x103) + _0x2fd040(0x118, 0x33b, 0x151, 0x241, 0x1eb) + _0x2fd040(0x1a7, 0x1a2, 0x16d, 0x27b, 0x15a) + _0x1c985e(0x201, 0x275, 0x3b9, 0x1b7, 0x3ab) + '\x0a') + (_0xfc290b(0x101, 0x197, -0x5, 0x119, 0x13c) + _0x39049b(0x194, 0x287, 0x294, 0x2, 0x13b) + _0x135656(0x545, 0x604, 0x51a, 0x472, 0x3f0) + _0x2fd040(0x3bc, 0x21e, 0x1e8, 0x26b, 0x305)) + (_0xfc290b(0xcc, 0x11c, 0xa2, 0x147, -0x93) + _0x135656(0x401, 0x340, 0x35d, 0x2db, 0x3da) + _0x39049b(-0xaf, 0x8a, 0x2d, 0x117, -0x1) + _0x1c985e(0x19e, 0x205, 0xf2, 0x333, 0x2ac) + _0x39049b(-0x2a, 0x72, 0xd, 0x52, 0x13a) + _0xfc290b(0x1b2, 0x163, 0x78, 0x23f, 0x151) + _0x39049b(-0x60, 0x198, 0x10, -0x1d, 0xe6) + _0xfc290b(0xe1, 0x39, 0x14b, 0x148, 0x124) + _0x1c985e(0x18f, 0x1e0, 0x345, 0x8b, 0x1fc) + _0xfc290b(0xe5, 0x17, 0x36, 0x1d4, 0xe0) + '\x0a') + (_0x39049b(0x137, 0x53, 0x14a, 0x1b2, 0xa9) + _0x2fd040(0x296, 0x2b6, 0x30c, 0x158, 0x29d) + _0x135656(0x5e9, 0x726, 0x6c3, 0x6f8, 0x538) + _0xfc290b(0x21d, 0x2f9, 0x152, 0x23d, 0xbb)) + (_0x2fd040(0x330, 0x1c4, 0xb2, 0x27d, 0x1d6) + _0x39049b(-0x165, 0xfb, -0x27, -0x49, -0x25) + _0x1c985e(0x23f, 0x1e7, 0x1cc, 0xeb, 0x184) + _0x135656(0x416, 0x41f, 0x491, 0x442, 0x3fc) + _0x2fd040(0x90, -0x8e, -0xb0, 0x8e, 0xb6) + _0x1c985e(0x37a, 0x3e4, 0x4e8, 0x2aa, 0x518) + _0x39049b(0x11, 0x1d5, -0x10, 0x41, 0x86) + _0xfc290b(0x252, 0x34d, 0x280, 0x2e6, 0x2d4) + _0x135656(0x4d4, 0x3a5, 0x4fa, 0x494, 0x432)) + (_0xfc290b(0x101, 0x213, 0x214, 0x115, 0x5) + _0x2fd040(0x396, 0x2e6, 0x18b, 0x1b0, 0x29d) + _0x39049b(0x215, 0x113, 0x16a, 0x23e, 0x13e) + _0x39049b(0x192, 0x2a0, 0x160, 0xd4, 0x192)) + (_0x1c985e(0x139, 0x25c, 0x2df, 0x182, 0x13e) + _0x2fd040(0x159, 0x81, 0xf7, 0x12, 0x13d) + _0x1c985e(0xa3, 0x1e7, 0x15d, 0x22d, 0x207) + _0xfc290b(0x90, -0x37, 0xf2, -0x2b, 0x9d) + _0xfc290b(0x125, 0x50, 0xe6, 0x176, 0x130) + _0x1c985e(0x1c7, 0x22a, 0x11f, 0x20b, 0x356) + _0x2fd040(0x318, 0x46c, 0x26d, 0x48d, 0x355) + _0x1c985e(0x239, 0x1e3, 0x9e, 0x170, 0x1cc) + _0xfc290b(0x1d7, 0x117, 0x19b, 0x27a, 0x208) + _0x135656(0x57d, 0x6d0, 0x534, 0x554, 0x688) + '\x0a') + (_0x135656(0x4cf, 0x5c2, 0x3dd, 0x632, 0x472) + _0x2fd040(0x329, 0x2cb, 0x2fb, 0x301, 0x29d) + _0x1c985e(0x354, 0x363, 0x3ac, 0x2ca, 0x388) + _0x135656(0x3b7, 0x2d4, 0x439, 0x429, 0x3e7) + '*\x0a') + (_0xfc290b(0xcc, 0x14, 0x52, 0x19a, 0x19f) + _0xfc290b(0x33, 0x25, -0x78, -0xd5, 0x185) + _0x2fd040(0x12e, 0x229, 0x132, 0x11c, 0x161) + _0x39049b(0x74, 0x123, -0x59, 0x59, 0xe5) + _0x2fd040(0x23e, 0x162, 0x19a, 0x1f0, 0x265) + _0x135656(0x51d, 0x62b, 0x5f0, 0x654, 0x51e) + _0xfc290b(0x34, 0x65, -0xd1, -0x8b, -0x89) + _0x2fd040(0x315, 0x178, 0x193, 0x361, 0x2b9) + '\x0a') + (_0x135656(0x4cf, 0x38c, 0x393, 0x44a, 0x4d8) + _0x2fd040(0x3e4, 0x274, 0x3ad, 0x3f0, 0x29d) + _0xfc290b(0x1d3, 0x233, 0x297, 0x1bc, 0xed) + _0x135656(0x618, 0x77e, 0x65b, 0x515, 0x652) + '*\x0a') + (_0x1c985e(0x35f, 0x25c, 0x267, 0x260, 0x2c9) + _0x1c985e(0x250, 0x1c3, 0x1da, 0x1c6, 0x64) + _0x135656(0x425, 0x2fd, 0x350, 0x420, 0x4d2) + _0x135656(0x5ad, 0x59c, 0x531, 0x54a, 0x6b8) + _0x1c985e(0x3f1, 0x36c, 0x302, 0x23f, 0x492) + _0x39049b(0x18f, 0x120, 0x16, -0xf9, 0x2a) + _0x135656(0x500, 0x448, 0x47b, 0x4ee, 0x3b1) + _0x39049b(-0x6c, -0x14b, 0xa, 0x8c, -0xa7)) + (_0x39049b(0x143, 0x8, 0x10b, 0xd9, 0xa9) + _0x135656(0x561, 0x4cf, 0x5ba, 0x5ef, 0x493) + _0x135656(0x5a1, 0x659, 0x4ce, 0x485, 0x5d3) + _0x2fd040(0x42, 0x7a, 0x221, 0x99, 0x131) + _0x39049b(-0x121, -0x9d, -0x1de, -0xe5, -0xa9)) + (_0xfc290b(0xcc, 0x7c, 0x1dc, 0x1c, 0x1eb) + _0x39049b(0x101, -0x38, 0x92, 0xb8, -0x25) + _0x135656(0x4e4, 0x405, 0x38d, 0x524, 0x50e) + _0x39049b(0x2b2, 0x1f0, 0x16e, 0xe7, 0x1c9) + _0x135656(0x581, 0x68a, 0x4ac, 0x42f, 0x5ba) + _0x39049b(0xa, -0x158, 0x9e, -0x10, -0x1) + _0x39049b(0x1d8, 0x29, -0x50, 0x1a1, 0xe5) + _0x135656(0x371, 0x499, 0x28b, 0x3c0, 0x37d) + _0x2fd040(0x1ec, 0x215, 0x2d6, 0x150, 0x251) + '\x0a') + (_0x1c985e(0x38a, 0x291, 0x30f, 0x32e, 0x278) + _0x135656(0x561, 0x4b7, 0x40e, 0x6ba, 0x646) + _0x1c985e(0x2c3, 0x363, 0x36a, 0x26d, 0x297) + _0xfc290b(0x204, 0x1ef, 0x2e0, 0xe8, 0xf2) + _0x2fd040(0x108, 0x16c, 0x1b2, 0x25e, 0x1fe)) + (_0xfc290b(0xcc, 0x45, 0x1db, -0x32, 0x13d) + _0x1c985e(0x260, 0x1c3, 0x157, 0x30a, 0x203) + _0x1c985e(0x140, 0x1e7, 0x21e, 0xf0, 0x33f) + _0x2fd040(0x253, 0x24f, 0x2ad, 0x1dc, 0x2e9) + _0x135656(0x53b, 0x68c, 0x469, 0x690, 0x517) + _0xfc290b(0x24e, 0x37b, 0x195, 0x2b6, 0x1ef) + _0x135656(0x458, 0x47e, 0x3ae, 0x4d0, 0x58a) + _0xfc290b(0x3, -0x21, -0x11f, 0x20, 0x74) + _0x1c985e(0x330, 0x2ba, 0x181, 0x179, 0x200) + _0x1c985e(0x15d, 0x20d, 0x19b, 0x163, 0x35b) + _0xfc290b(-0x15, 0xa2, 0x4c, -0x66, -0xdd)) + (_0x1c985e(0x2ed, 0x291, 0x2f4, 0x3a9, 0x3cd) + _0x1c985e(0x35a, 0x323, 0x320, 0x366, 0x2ff) + _0xfc290b(0x1d3, 0x1ef, 0x261, 0x1ce, 0x1cb) + _0x135656(0x397, 0x352, 0x4f7, 0x255, 0x2fa) + '\x0a') + (_0x39049b(0x1cf, 0x67, 0x154, 0x59, 0x74) + _0x135656(0x401, 0x2c0, 0x440, 0x402, 0x302) + _0x39049b(-0x24, 0x69, -0x15f, 0xab, -0x1) + _0xfc290b(0x17f, 0x36, 0x289, 0x217, 0xcd) + _0x2fd040(0x2cf, 0x168, 0x218, 0xa0, 0x1ae) + _0xfc290b(0x10, -0x132, 0xf, -0x49, -0x20) + _0x39049b(0x21d, 0x17c, 0x125, 0x174, 0xee) + _0x39049b(-0xbe, -0xe1, 0x11, 0x1e, -0x20) + _0xfc290b(0x187, 0x9e, 0x249, 0x2c0, 0xd3) + _0x135656(0x37f, 0x404, 0x2a4, 0x42a, 0x4ae)) + (_0x135656(0x4cf, 0x4ab, 0x5eb, 0x4b7, 0x472) + _0xfc290b(0x193, 0x255, 0x141, 0xab, 0x212) + _0xfc290b(0x1d3, 0x170, 0x28c, 0x1cd, 0x103) + _0x1c985e(0x2f1, 0x237, 0x28d, 0x27a, 0x31c) + _0xfc290b(-0xf, -0x102, -0x8b, 0x136, 0xb7) + '\x0a') + (_0x2fd040(0x14f, 0xf9, 0x297, 0x123, 0x1d6) + _0xfc290b(0x33, 0x82, -0xfa, -0xe5, -0x125) + _0x39049b(-0x10a, -0xfd, 0x97, -0x148, -0x1) + _0x2fd040(0x302, 0x12f, 0x147, 0x130, 0x20a) + _0x39049b(-0x1e, 0x134, 0x3f, -0x104, 0x58) + _0x135656(0x3d0, 0x295, 0x400, 0x2d6, 0x293) + _0x39049b(0x1d9, 0x70, 0x23a, 0x64, 0x175) + _0xfc290b(0x1ed, 0x8b, 0x33b, 0x103, 0x324) + _0xfc290b(0x106, 0x1a5, 0x62, 0x127, 0x27)) + (_0x39049b(0x2f, 0x100, 0xc2, 0x133, 0xa9) + _0xfc290b(0x193, 0x2b5, 0x1fd, 0x38, 0x3e) + _0x2fd040(0x1ea, 0x3d3, 0x3dc, 0x20d, 0x2dd) + _0x2fd040(0x1e6, 0x286, 0x27c, 0x3a3, 0x2d0) + _0x39049b(0xc2, -0x3a, -0x75, 0xf7, 0x45)) + (_0x1c985e(0x25a, 0x25c, 0x1d7, 0x2cf, 0x1b3) + _0xfc290b(0x33, -0xc5, -0x27, -0xe5, 0xb5) + _0x39049b(-0x144, -0x9d, 0xd4, 0xe3, -0x1) + _0xfc290b(0x13d, 0x153, 0x19b, 0xce, 0xc9) + _0x39049b(0xee, 0x241, 0x214, 0x2d0, 0x18a) + _0xfc290b(0x89, 0x69, 0xbf, -0x40, 0x69) + _0x2fd040(0x228, 0x1df, 0x1e4, 0x29b, 0x1d8) + _0x1c985e(0x1b8, 0x253, 0x1d6, 0x38d, 0x29b) + _0x2fd040(0x226, 0xd5, 0x27d, 0x1d7, 0x17d)) + (_0x39049b(0x63, 0x156, 0x22, 0x4b, 0xa9) + _0x2fd040(0x24e, 0x34d, 0x1c3, 0x37b, 0x29d) + _0x135656(0x5a1, 0x606, 0x602, 0x65d, 0x6b3) + _0x39049b(0x4a, 0x65, -0x10, 0xcf, 0x91)) + (_0x39049b(0x74, 0x1ab, 0x164, 0x1a1, 0x74) + _0x135656(0x401, 0x2e5, 0x2aa, 0x416, 0x3f5) + _0xfc290b(0x57, 0x41, 0x70, 0x19c, 0x44) + _0xfc290b(-0x1b, 0x4d, -0xb5, -0xf9, 0x5d) + _0xfc290b(0x257, 0x26f, 0x15e, 0x205, 0x3b5) + _0xfc290b(0x143, 0x122, 0x229, 0x132, 0x140) + _0x135656(0x39c, 0x44c, 0x480, 0x42d, 0x4e3) + _0x2fd040(0x104, 0x178, 0x1e, 0x154, 0xe4) + _0x39049b(0x1c2, 0x134, -0xc, 0x1, 0xb6) + _0x39049b(0x163, 0x26d, 0x203, 0x1a6, 0x195) + _0x2fd040(0x125, 0xd2, 0xd0, 0x227, 0x210)) + (_0x39049b(0x1b5, -0x4b, -0x47, 0x1d8, 0xa9) + _0x135656(0x561, 0x5f8, 0x615, 0x64f, 0x43a) + _0xfc290b(0x1d3, 0x331, 0xc6, 0x153, 0x2d1) + _0xfc290b(0x246, 0x1ea, 0x32c, 0x332, 0x2f2) + _0x1c985e(0x217, 0x270, 0x264, 0x2ca, 0x323)) + (_0x39049b(-0x89, 0x113, 0x1b5, 0x194, 0x74) + _0x2fd040(0x144, 0x36, 0x1b6, 0x29c, 0x13d) + _0xfc290b(0x57, 0x17e, -0xbf, 0x13e, 0x25) + _0x1c985e(0x2c9, 0x313, 0x433, 0x3ef, 0x1fd) + _0x2fd040(0x323, 0xeb, 0x165, 0x14b, 0x1f2) + _0x2fd040(0x1f0, 0x36e, 0x377, 0x397, 0x2e0) + _0xfc290b(-0x10, 0xe1, 0x81, -0x3e, -0x3b)) + (_0xfc290b(0x101, 0x1a2, 0x88, 0x10d, 0x23e) + _0x1c985e(0x1e3, 0x323, 0x238, 0x345, 0x373) + _0xfc290b(0x1d3, 0x113, 0x22c, 0x217, 0x1e4) + _0xfc290b(0x14e, 0x134, 0x16e, 0x15c, 0x16f) + '*\x0a') + (_0x135656(0x49a, 0x5a3, 0x39d, 0x41a, 0x36d) + _0x2fd040(-0x8, 0x22c, 0x1a2, 0xcb, 0x13d) + _0x2fd040(0x115, 0x4, 0x26a, 0x22f, 0x161) + _0x135656(0x50b, 0x656, 0x48e, 0x5a8, 0x665) + _0x2fd040(0x234, 0x2e5, 0x3cb, 0x40b, 0x2ef) + _0xfc290b(0x83, -0xc3, 0x191, -0x69, -0xa1) + _0x135656(0x609, 0x64e, 0x597, 0x55e, 0x5ee) + _0x39049b(0xc0, 0x1d4, 0x2d, 0x72, 0x12f) + _0x2fd040(0x1c8, -0x38, 0x4f, 0xe5, 0xbb)) + (_0xfc290b(0x101, 0x60, 0x182, 0x155, 0x116) + _0x1c985e(0x273, 0x323, 0x3ee, 0x3bc, 0x252) + _0x2fd040(0x1d4, 0x286, 0x32f, 0x19e, 0x2dd) + _0xfc290b(-0x2a, -0xa2, 0x3e, 0x37, 0x104) + _0x1c985e(0x2b9, 0x23b, 0x36b, 0x245, 0x192)) + (_0xfc290b(0xcc, 0x21b, -0x2d, -0x85, -0x20) + _0x39049b(0x8b, 0x50, 0x4e, 0x84, -0x25) + _0x135656(0x418, 0x2c6, 0x43c, 0x3d8, 0x530) + _0x135656(0x395, 0x267, 0x39c, 0x2eb, 0x273) + _0x2fd040(0xe0, 0x155, 0x2fe, 0x16a, 0x238) + _0xfc290b(0x105, 0x23c, 0xb8, 0x83, 0x9b) + _0x135656(0x3eb, 0x3d2, 0x2d1, 0x521, 0x3c2) + _0xfc290b(0x19d, 0xa1, 0x1cd, 0x1c7, 0x229) + _0x1c985e(0x31d, 0x3db, 0x3d6, 0x285, 0x409) + _0x2fd040(0x70, 0x170, 0x296, 0x161, 0x15d) + _0x39049b(0x18b, 0x27f, 0x20e, 0x234, 0x17f) + _0x1c985e(0x3ca, 0x35f, 0x28e, 0x398, 0x220) + '\x0a\x0a') + (_0x39049b(0x92, 0x32, -0xb, -0x26, 0xa9) + _0x135656(0x561, 0x4ad, 0x449, 0x4aa, 0x5c1) + _0x1c985e(0x82, 0x16b, 0x166, 0x146, 0x19f) + _0xfc290b(0x18b, 0xc4, 0x2ed, 0x1b2, 0x25c) + _0xfc290b(0x68, 0xe0, -0x87, 0x130, 0x124)) + (_0x39049b(0x179, 0xc7, -0xe0, -0xcb, 0x74) + _0x135656(0x401, 0x4a6, 0x3b3, 0x4d3, 0x307) + _0x2fd040(0x1d7, 0x16b, 0x1d2, 0x203, 0x10e) + _0x1c985e(0x3b8, 0x30c, 0x2e6, 0x264, 0x44c) + _0x1c985e(0xbf, 0x21d, 0x182, 0x316, 0x18c) + _0x39049b(-0x110, -0x4d, -0xd2, 0x4d, -0x53) + _0x2fd040(0x1fb, 0x1d9, -0x37, -0x24, 0xc7) + _0x135656(0x626, 0x590, 0x578, 0x6a1, 0x620) + _0x2fd040(0x26a, 0x238, 0x37b, 0x22e, 0x321) + _0x2fd040(0xe3, 0x200, 0x2e, 0x80, 0x123) + _0x2fd040(0x383, 0x19f, 0x31b, 0x3ee, 0x2e8) + '\x0a\x0a') + (_0x135656(0x4cf, 0x5cf, 0x3b9, 0x5fa, 0x5e9) + _0x1c985e(0x380, 0x323, 0x3f5, 0x1d5, 0x221) + _0xfc290b(0x1ec, 0x28a, 0x25b, 0x140, 0x1ff) + _0x39049b(-0x14f, -0x7c, -0xb5, -0x164, -0x98)) + (_0x39049b(0x178, 0x109, -0xca, 0xa4, 0x74) + _0xfc290b(0x33, 0x21, 0x6f, 0x2c, -0x10d) + _0x135656(0x3d2, 0x283, 0x281, 0x4c2, 0x525) + _0x135656(0x4e2, 0x385, 0x4f7, 0x5c9, 0x5eb) + _0x1c985e(0x1b4, 0x138, 0x17c, 0xac, 0x2b) + _0x39049b(-0x4d, -0x14c, -0x4e, -0x10a, -0x61) + _0x135656(0x38b, 0x4cf, 0x445, 0x24a, 0x47a) + _0x1c985e(0x2e0, 0x3e8, 0x452, 0x2ff, 0x3c2) + _0x2fd040(0x348, 0x27a, 0x33f, 0x1ca, 0x321) + _0x135656(0x3e7, 0x395, 0x339, 0x500, 0x405) + _0x1c985e(0x4b5, 0x36e, 0x4b9, 0x3e7, 0x351) + '\x0a\x0a') + (_0x2fd040(0xdf, 0x1dc, 0x278, 0xca, 0x20b) + _0x1c985e(0x3d1, 0x323, 0x46e, 0x266, 0x270) + _0x39049b(-0x119, -0x7c, 0x6f, 0x9d, -0x89) + _0x135656(0x523, 0x649, 0x3ee, 0x4f7, 0x468) + _0x39049b(0x9f, 0x263, 0x17f, 0x164, 0x1a1)) + (_0x2fd040(0xdb, 0x9b, 0x27f, 0x157, 0x1d6) + _0x1c985e(0x21d, 0x1c3, 0x246, 0xa6, 0x177) + _0x39049b(-0x125, 0x57, 0x48, -0xf9, -0x54) + _0x2fd040(0x357, 0x2c2, 0x3f7, 0x392, 0x34f) + _0x39049b(-0xc6, -0x66, 0x168, 0x8e, 0x82) + _0xfc290b(-0x50, -0x8c, -0x10f, -0xdf, -0x173) + _0x39049b(0x23, -0x185, 0x53, -0x1b1, -0x63) + _0xfc290b(0xb5, -0x95, 0xd0, 0xd8, 0x214) + _0x135656(0x490, 0x378, 0x575, 0x3de, 0x587) + _0xfc290b(0x4b, 0xd2, 0x167, 0x12, 0x6a) + _0xfc290b(0x163, 0x128, 0x1b2, 0x96, 0x150) + _0x39049b(-0x172, -0xcc, 0xf1, -0x1c9, -0x6d)) + (_0x1c985e(0x392, 0x291, 0x257, 0x3f0, 0x13b) + _0x135656(0x561, 0x622, 0x434, 0x4f7, 0x4c9) + _0xfc290b(0xd3, 0x13, -0x22, 0xe2, 0x93) + _0xfc290b(0x1fd, 0x2d9, 0xb1, 0x135, 0x1ef)) + (_0x1c985e(0x110, 0x25c, 0x392, 0x37c, 0x1d1) + _0x2fd040(-0xf, 0x8e, 0xdd, 0x5f, 0x13d) + _0x2fd040(0x1ee, -0x36, -0x1e, 0x206, 0x10e) + _0xfc290b(-0x5f, -0xf1, -0x75, -0x15d, 0xcf) + _0xfc290b(0x17, -0xf6, -0x45, -0x3b, -0x2e) + _0x135656(0x5a0, 0x539, 0x584, 0x5f7, 0x668) + _0x39049b(-0x7d, -0x124, -0xf3, -0xc2, -0x1) + _0xfc290b(0x11c, 0xd9, -0x2a, 0x9b, 0x91) + _0xfc290b(0x254, 0x169, 0x158, 0x1cd, 0x257) + _0x2fd040(0x1f2, 0x1d0, 0xd3, 0x1ae, 0x1e8) + _0xfc290b(0x252, 0x36e, 0xf0, 0x248, 0x2b8) + _0x135656(0x4d4, 0x515, 0x5ce, 0x609, 0x592)) + (_0x2fd040(0xc6, 0x1ff, 0x1a2, 0x34a, 0x20b) + _0x1c985e(0x380, 0x323, 0x289, 0x436, 0x3b5) + _0x2fd040(0x47c, 0x4ad, 0x4b0, 0x2bd, 0x352) + _0x39049b(-0x4f, -0x204, 0xa9, 0xd, -0xa3) + _0x1c985e(0x127, 0x147, 0x61, 0x289, -0x17) + '\x0a') + (_0x135656(0x49a, 0x542, 0x42a, 0x3d8, 0x367) + _0x2fd040(0x2a3, 0x6d, 0x12, 0x1a0, 0x13d) + _0x1c985e(0x34, 0x194, 0x41, 0x1de, 0x24d) + _0x135656(0x630, 0x544, 0x591, 0x575, 0x5a5) + _0x135656(0x4da, 0x5fd, 0x4de, 0x38e, 0x617) + _0xfc290b(0x12c, 0xfe, 0x65, 0x1a4, -0x2b) + _0x39049b(-0x96, -0x93, -0x2b, -0x168, -0x3b) + _0x135656(0x61f, 0x4d4, 0x6a4, 0x6d7, 0x777) + _0x135656(0x5d4, 0x679, 0x525, 0x596, 0x518) + _0x135656(0x56a, 0x449, 0x64e, 0x661, 0x5ed) + _0x1c985e(0x3d2, 0x2c2, 0x28e, 0x247, 0x228) + _0x2fd040(0xf6, 0x3b, 0x36, 0x1f6, 0xbb)) + (_0x1c985e(0x2ae, 0x291, 0x18e, 0x36f, 0x1b8) + _0x39049b(0x1fc, 0x24a, 0x1d1, 0x245, 0x13b) + _0x2fd040(0x343, 0x40a, 0x40f, 0x395, 0x36a) + _0xfc290b(0xc5, 0x22, 0xa5, 0xaf, 0x167) + _0x1c985e(0x15b, 0x155, 0x9e, 0x1a1, 0x33)) + (_0x1c985e(0x201, 0x25c, 0x30b, 0x2b9, 0x102) + _0x39049b(0x32, -0xe, 0xc, -0xb8, -0x25) + _0x135656(0x3ce, 0x304, 0x2e8, 0x4a0, 0x485) + _0x39049b(0xf9, 0x1c7, 0x58, 0xe8, 0x1ba) + _0x2fd040(-0x22, 0xf6, 0x1d8, 0x87, 0xc7) + _0x135656(0x3ad, 0x495, 0x4b5, 0x3a5, 0x4bb) + _0x135656(0x39a, 0x34f, 0x397, 0x368, 0x279) + _0x135656(0x5d4, 0x58f, 0x5d3, 0x52f, 0x6f1) + _0x2fd040(0x39c, 0x181, 0x2b8, 0x360, 0x2a6) + _0xfc290b(0x132, 0x38, 0x14, 0x149, 0x293) + _0xfc290b(-0x4f, -0x18, 0x92, -0x172, -0xd8)) + (_0x39049b(0x82, -0x45, 0xdb, -0x71, 0xa9) + _0x39049b(-0x1c, 0x267, 0x21a, 0xf8, 0x13b) + _0x39049b(0x2bd, 0x80, 0x253, 0x75, 0x17b) + _0x1c985e(0xe9, 0x1a6, 0x256, 0xf7, 0xa7)) + (_0x39049b(0xec, 0x1a0, 0x19, 0x16e, 0x74) + _0x39049b(0x139, 0x108, -0x121, -0xcf, -0x25) + _0x1c985e(0x2b1, 0x194, 0x293, 0xad, 0xed) + _0x1c985e(0x29a, 0x1a8, 0x14e, 0xbf, 0x2a7) + _0x1c985e(0x2a1, 0x329, 0x261, 0x482, 0x46f) + _0x39049b(-0x27, -0xd5, -0x13e, -0x3b, -0x11) + _0x39049b(-0xbd, 0x34, 0x65, -0x14e, -0x7b) + _0x1c985e(0x2af, 0x1d2, 0x189, 0xa8, 0x316) + _0x135656(0x46e, 0x312, 0x5d3, 0x5a1, 0x59d) + _0x39049b(-0x16a, -0x14c, -0x141, 0x25, -0x2a) + '\x0a\x0a') + (_0xfc290b(0x101, 0x173, -0x19, 0x243, 0xd7) + _0x1c985e(0x46d, 0x323, 0x2c7, 0x350, 0x2f4) + _0xfc290b(0x1d3, 0x10c, 0x255, 0x26f, 0x20c) + _0x1c985e(0x339, 0x397, 0x265, 0x241, 0x271) + _0x39049b(-0x36, 0x228, 0x18e, 0x97, 0xf2)) + (_0x1c985e(0x251, 0x25c, 0x19a, 0x2ef, 0x2e7) + _0x1c985e(0x2f4, 0x1c3, 0x68, 0x1fe, 0x13a) + _0x1c985e(0x2fa, 0x194, 0x3a, 0x9b, 0x12e) + _0x2fd040(0x1ba, 0x2f0, 0xbc, 0x25e, 0x18a) + _0x135656(0x57b, 0x560, 0x492, 0x471, 0x437) + _0x2fd040(0xd5, 0x22c, 0x1a9, 0xac, 0x18f) + _0x1c985e(0x189, 0x176, 0x3d, 0x12a, 0x8f) + _0x2fd040(0x2fb, 0x37e, 0x18b, 0x1b6, 0x2ed) + _0xfc290b(-0x15, 0x5f, 0x14e, 0xcd, 0x13f)) + (_0x1c985e(0x21c, 0x291, 0x222, 0x3cd, 0x3dc) + _0x1c985e(0x333, 0x323, 0x236, 0x375, 0x25b) + _0x39049b(0x12f, 0xa4, 0x3d, 0xc4, 0x17b) + _0x2fd040(0x27b, 0x461, 0x393, 0x40b, 0x315) + _0x39049b(-0xa7, 0x149, 0xcf, 0x14e, 0x88)) + (_0x2fd040(0x79, 0x226, 0x1a5, 0x97, 0x1d6) + _0x39049b(-0x23, -0xbc, -0x14a, -0x11, -0x25) + _0x1c985e(0xb7, 0x194, 0x6a, 0x27b, 0x1af) + _0x2fd040(0x373, 0x424, 0x413, 0x3f8, 0x32c) + _0x2fd040(0x3e9, 0x3c7, 0x2fc, 0x48d, 0x360) + _0x135656(0x501, 0x64f, 0x640, 0x44e, 0x472) + _0x2fd040(0x12a, 0x29f, 0x136, 0x32b, 0x23c) + _0x135656(0x37f, 0x3df, 0x36f, 0x33b, 0x322)) + (_0x135656(0x4cf, 0x4ac, 0x4f3, 0x3f8, 0x5db) + _0x135656(0x561, 0x53f, 0x5bd, 0x41f, 0x52a) + _0x39049b(0x238, 0x2a8, 0x29b, 0x1d5, 0x17b) + _0x1c985e(0x312, 0x3c2, 0x361, 0x395, 0x42d) + _0x39049b(0x1bd, 0x10, 0xcc, 0x1a, 0x167)) + (_0xfc290b(0xcc, -0x68, 0x64, 0xc6, -0x28) + _0xfc290b(0x33, 0x1b, -0x86, 0x150, -0x39) + _0xfc290b(0x4, -0xe9, 0x69, -0x160, -0x2f) + _0xfc290b(0x18c, 0x208, 0x268, 0x28e, 0x67) + _0x135656(0x596, 0x5e1, 0x471, 0x578, 0x6be) + _0x2fd040(0x20b, 0x218, 0x1b5, 0x33f, 0x29b) + _0x39049b(0x166, 0x23d, 0x267, 0x288, 0x1a4) + _0x135656(0x4d4, 0x4c4, 0x39b, 0x5b1, 0x5ae)) + (_0x135656(0x4cf, 0x5f2, 0x39b, 0x4c9, 0x4f8) + _0x1c985e(0x39e, 0x360, 0x2ff, 0x2d6, 0x1fb) + _0x39049b(-0xcf, -0xaf, -0x2c, 0x174, 0x5f) + _0xfc290b(0xd1, -0x2f, 0x21f, 0xbb, 0x16c)) + (_0x1c985e(0x2be, 0x25c, 0x1bf, 0x339, 0x25c) + _0x135656(0x401, 0x47e, 0x4f7, 0x439, 0x453) + _0x1c985e(0xa7, 0x194, 0x2d3, 0x8f, 0x130) + _0x1c985e(0x321, 0x233, 0x322, 0x103, 0x100) + _0x135656(0x548, 0x3ff, 0x6a2, 0x4c6, 0x47b) + _0x2fd040(0x196, 0x26d, 0x18c, 0x193, 0x16a) + _0x39049b(-0x10f, 0x62, -0xcf, -0xa8, -0x43) + _0x2fd040(0xe9, 0x1ec, 0x25c, 0x2bf, 0x23c) + _0x2fd040(0x8f, 0x3f, 0x5, 0x1ff, 0xbb)) + (_0xfc290b(0x101, 0xc7, -0x1c, 0x15b, 0x13a) + _0xfc290b(0x193, 0x208, 0x52, 0x177, 0x22b) + _0x39049b(0x80, 0x14c, 0xf0, 0x222, 0x11f) + _0x2fd040(0x1d2, 0x258, 0x2d1, 0x189, 0x214)) + (_0x2fd040(0x170, 0x14c, 0x101, 0x1bd, 0x1d6) + _0x1c985e(0x316, 0x1c3, 0x140, 0x2bd, 0x16c) + _0x1c985e(0x139, 0x194, 0x46, 0x2f8, 0xc8) + _0x1c985e(0x2a5, 0x385, 0x37c, 0x44d, 0x467) + _0x2fd040(0x303, 0x314, 0x2d8, 0x374, 0x372) + _0x1c985e(0x390, 0x3df, 0x532, 0x395, 0x320) + _0x135656(0x4ef, 0x5b0, 0x4cf, 0x3a8, 0x603) + _0x2fd040(-0x1d, 0x55, 0x1ce, 0x82, 0x100) + _0x135656(0x3b9, 0x411, 0x397, 0x421, 0x3ab)) + (_0x135656(0x4cf, 0x388, 0x616, 0x5a9, 0x410) + _0x1c985e(0x1dd, 0x323, 0x226, 0x3b6, 0x3f2) + _0xfc290b(0x1d3, 0x13e, 0xa8, 0x1c3, 0x235) + _0x2fd040(0x420, 0x3b2, 0x403, 0x2b1, 0x2d5) + _0xfc290b(0x127, 0x1fd, 0x84, 0x20b, -0x29)) + (_0xfc290b(0xcc, 0x124, 0x15, 0x1b4, -0x1f) + _0x2fd040(0x68, 0x272, 0x4c, 0x22b, 0x13d) + _0x39049b(-0x11e, -0x11a, -0xad, -0x199, -0x54) + _0x2fd040(0x7f, 0x42, 0x1e5, 0x27c, 0x1a6) + _0x39049b(0x255, 0x34, 0xd, 0x1e7, 0x156) + _0x39049b(-0x6c, 0xaf, 0xd5, -0x8d, 0x1f) + _0x39049b(0x8c, 0x22c, 0x31a, 0x25c, 0x1be) + _0x1c985e(0x171, 0x275, 0x215, 0x3c0, 0x3db) + '\x0a') + (_0x1c985e(0x18f, 0x291, 0x30a, 0x223, 0x2fa) + _0x39049b(0x183, 0x175, 0xa3, 0x64, 0x13b) + _0x135656(0x603, 0x600, 0x4c4, 0x6be, 0x61b) + _0x1c985e(0x370, 0x2fb, 0x39e, 0x429, 0x415) + '*\x0a') + (_0xfc290b(0xcc, 0x19e, 0x22b, -0x93, 0x19b) + _0x2fd040(0x20a, 0x115, 0x64, 0x19b, 0x13d) + _0xfc290b(0xd8, 0x91, 0x198, 0x19d, -0x72) + _0xfc290b(0x242, 0x2ac, 0x189, 0xe0, 0xf7) + _0x135656(0x5dd, 0x69f, 0x526, 0x50b, 0x539) + _0xfc290b(0x95, 0x1a4, 0x63, 0x149, 0x65) + _0x1c985e(0x495, 0x336, 0x395, 0x454, 0x274) + _0x2fd040(0x3f5, 0x1f3, 0x39a, 0x3d0, 0x345) + _0x39049b(0x1ce, 0x192, 0x5f, -0x17, 0x12f) + _0x39049b(0x77, -0xcc, -0xc4, -0xdb, -0xa7)) + (_0x1c985e(0x273, 0x291, 0x137, 0x34a, 0x24d) + _0x2fd040(0x15c, 0x1d8, 0x353, 0x253, 0x29d) + _0x135656(0x396, 0x33d, 0x410, 0x3c4, 0x3d4) + _0x39049b(-0x108, -0x3e, -0x149, -0x55, -0x1a) + _0xfc290b(0x16b, 0x2af, 0x108, 0x1f3, 0x43) + '*\x0a') + (_0x1c985e(0x1a7, 0x25c, 0x137, 0x26c, 0x25b) + _0x2fd040(-0x3, -0x1f, 0x6b, 0x1b4, 0x13d) + _0x135656(0x425, 0x4ec, 0x324, 0x364, 0x460) + _0x2fd040(0x28e, 0xe9, 0x206, 0x21b, 0x247) + _0x39049b(-0xd7, 0x3, -0x44, 0x9e, -0x18) + _0xfc290b(0x3e, 0x67, -0xb7, 0xbd, 0x94) + _0x2fd040(0x242, 0x359, 0x2c2, 0x19a, 0x2fe) + _0x2fd040(0x234, 0x2bc, 0x1ba, 0x131, 0x170) + _0x135656(0x515, 0x51e, 0x536, 0x645, 0x516) + '\x0a') + (_0xfc290b(0x101, 0x172, 0x13c, 0x226, 0x163) + _0xfc290b(0x193, 0x103, 0x18d, 0x1f2, 0x179) + _0x1c985e(0x455, 0x324, 0x45b, 0x32c, 0x3e9) + _0x39049b(-0xb, -0x177, 0x75, -0x1ca, -0x96) + _0x39049b(0x5e, 0x262, 0x2e4, 0x2a8, 0x1b6)) + (_0x2fd040(0xb3, 0x132, 0x1a1, 0x277, 0x1d6) + _0x39049b(-0xbf, 0xf8, -0x105, -0x169, -0x25) + _0x1c985e(0x85, 0x1da, 0x1bb, 0x121, 0xbf) + _0x135656(0x4bf, 0x57c, 0x50c, 0x436, 0x5dc) + _0x1c985e(0x3b8, 0x34a, 0x45a, 0x204, 0x3d2) + _0x135656(0x451, 0x39d, 0x360, 0x3bc, 0x554) + _0x1c985e(0x491, 0x3cb, 0x2d5, 0x4fa, 0x295) + _0x39049b(0x11a, 0x132, 0x1d7, 0x180, 0x12f) + _0x2fd040(0x125, 0x1ae, 0x1d7, 0xfb, 0xbb)) + (_0x2fd040(0x224, 0x162, 0x19d, 0x1a3, 0x20b) + _0x2fd040(0x3f4, 0x2f9, 0x1b8, 0x17b, 0x29d) + _0x39049b(0x19b, 0x1d5, 0x100, 0x32b, 0x1ec) + _0xfc290b(0x162, 0xc4, 0x268, 0x15d, 0x29e) + _0x1c985e(0x1b4, 0x2fb, 0x43b, 0x1e6, 0x1cb) + '*\x0a') + (_0x1c985e(0x3aa, 0x25c, 0x351, 0x38a, 0x38f) + _0xfc290b(0x33, 0x62, 0x137, -0x2b, -0x58) + _0x1c985e(0x1b1, 0x1da, 0x1e4, 0x267, 0x325) + _0x135656(0x395, 0x2f8, 0x441, 0x3b1, 0x3cd) + _0xfc290b(0x24e, 0x1da, 0x365, 0x34a, 0x185) + _0x39049b(0x113, 0x105, -0x10b, -0xdc, -0x11) + _0xfc290b(-0x23, 0xe9, 0xfc, -0xbb, -0x77) + _0x1c985e(0x274, 0x36e, 0x3dd, 0x36f, 0x28b) + '\x0a\x0a') + (_0x39049b(-0x7f, 0x129, 0x95, 0x166, 0xa9) + _0x2fd040(0x31f, 0x27a, 0x149, 0x233, 0x29d) + _0xfc290b(0x209, 0xde, 0x309, 0x2c5, 0x12f) + _0x135656(0x4f0, 0x5f8, 0x534, 0x430, 0x4c7) + _0x135656(0x5dc, 0x59f, 0x47b, 0x569, 0x57a)) + (_0xfc290b(0xcc, -0x79, 0x1fc, 0x211, 0x1f) + _0x135656(0x401, 0x54a, 0x53b, 0x33b, 0x2c1) + _0xfc290b(0x4a, 0x198, 0x6a, 0x57, 0x24) + _0x39049b(0x132, 0xba, 0x33, -0xa3, 0x62) + _0x2fd040(-0xa7, 0xfd, 0x53, 0x126, 0xbe) + _0x2fd040(0x9a, 0x9c, 0x1fc, 0x1be, 0x195) + _0x39049b(0x105, 0x181, 0xcc, 0xcf, 0x136) + _0x135656(0x4d4, 0x42c, 0x4fe, 0x5fd, 0x3aa)) + (_0x2fd040(0x177, 0x155, 0x19d, 0x163, 0x20b) + _0x2fd040(0x2b0, 0x1b8, 0x3dc, 0x2c6, 0x29d) + _0xfc290b(-0x3f, -0x4d, -0x3a, -0x73, 0xb7) + _0x2fd040(0x21c, 0x2df, 0x209, 0x38b, 0x335) + _0x2fd040(0x26f, 0x465, 0x371, 0x3d3, 0x318)) + (_0xfc290b(0xcc, 0x15a, -0x68, 0x55, -0x44) + _0xfc290b(0x33, 0x134, -0x11, 0x194, -0xc3) + _0x135656(0x418, 0x49b, 0x36d, 0x4d2, 0x339) + _0x39049b(-0x12c, 0x2b, 0x81, -0xae, -0x91) + _0x1c985e(0xb0, 0x1ca, 0x24c, 0x22b, 0xd6) + _0x135656(0x432, 0x417, 0x3f5, 0x3fe, 0x438) + _0x2fd040(0x45e, 0x2a6, 0x432, 0x2a7, 0x2fe) + _0x2fd040(0x2d1, 0x115, 0x1b7, 0xbd, 0x170) + _0x135656(0x515, 0x531, 0x60c, 0x4b5, 0x4ac) + '\x0a') + (_0xfc290b(0x101, -0x24, 0x49, 0x23f, 0x1a7) + _0xfc290b(0x193, 0x276, 0x7f, 0x1d7, 0xf7) + _0x1c985e(0x61, 0x168, 0x205, 0xf9, 0x27) + _0x1c985e(0x3f3, 0x3f6, 0x473, 0x4e0, 0x47d) + _0x135656(0x60e, 0x4ac, 0x5a7, 0x5b0, 0x688) + _0x2fd040(0x21a, 0x16c, 0x1bb, 0xd3, 0x1b5)) + (_0x39049b(-0xf0, -0xe6, 0xaa, 0x12a, 0x74) + _0x135656(0x401, 0x380, 0x47d, 0x3b3, 0x2fb) + _0x135656(0x418, 0x3fb, 0x3ce, 0x3bb, 0x57d) + _0x1c985e(0x2ad, 0x157, 0x90, 0x204, 0xf4) + _0x2fd040(0x24c, 0x12a, 0x3f, 0x260, 0x144) + _0x2fd040(0x1e1, 0x1e6, 0xf4, 0x95, 0x1ba) + _0x39049b(0x66, 0xdc, 0xe8, -0x194, -0x56) + _0x39049b(0x81, 0x1a, 0x15f, 0x1f1, 0x175) + _0x135656(0x446, 0x480, 0x4f4, 0x44d, 0x4b1) + _0x1c985e(0xc5, 0x180, 0xed, 0x21b, 0x184)) + (_0x135656(0x4cf, 0x3c0, 0x4a6, 0x563, 0x493) + _0x135656(0x561, 0x577, 0x4ef, 0x60f, 0x50e) + _0x135656(0x3e9, 0x367, 0x336, 0x4c9, 0x4d3) + _0x135656(0x52b, 0x64a, 0x417, 0x600, 0x539) + _0x39049b(0x0, 0x11a, 0xa3, 0xec, 0x113) + '*\x0a') + (_0x1c985e(0x382, 0x25c, 0x192, 0x2a1, 0x2d1) + _0x135656(0x401, 0x542, 0x353, 0x41f, 0x36f) + _0x135656(0x418, 0x3bb, 0x360, 0x4ff, 0x3e0) + _0x2fd040(0x80, -0x19, -0x72, -0x50, 0xd1) + _0x135656(0x408, 0x3a2, 0x2b0, 0x359, 0x421) + _0xfc290b(0x6d, 0x22, -0x5d, -0xed, 0x158) + _0x2fd040(0x21a, 0x18b, 0x2c1, 0x2aa, 0x1f7) + _0x2fd040(0x40e, 0x251, 0x3ac, 0x20e, 0x351) + _0x2fd040(0x3c1, 0x1fc, 0x216, 0x39a, 0x291) + _0x135656(0x37f, 0x349, 0x34f, 0x294, 0x32d)) + (_0x135656(0x4cf, 0x36e, 0x566, 0x4fb, 0x56d) + _0x135656(0x561, 0x579, 0x5c1, 0x447, 0x538) + _0x135656(0x48a, 0x453, 0x3f4, 0x4b8, 0x567) + _0x2fd040(0x153, 0x13, 0x259, 0x172, 0x13f) + _0xfc290b(0x9d, -0x76, 0x4a, 0x1d, -0x5e)) + (_0x135656(0x49a, 0x416, 0x343, 0x345, 0x4d0) + _0x135656(0x401, 0x2e8, 0x47e, 0x364, 0x566) + _0x135656(0x5e6, 0x5ce, 0x5f2, 0x483, 0x530) + _0x2fd040(0x115, 0x162, 0x339, 0x215, 0x276) + _0x39049b(0x1a4, 0x295, 0x122, 0x261, 0x19f) + _0x39049b(0x7d, 0x272, 0x211, 0x120, 0x1ce) + _0x2fd040(0xd8, -0x3e, 0x5e, -0x93, 0xc2) + _0xfc290b(0x1a2, 0xad, 0x2bb, 0x91, 0x181) + _0x39049b(-0xc1, 0x178, 0xa0, 0xb6, 0x29) + _0xfc290b(0x115, 0x112, 0x106, 0xf5, 0xa9) + _0x1c985e(0x3d4, 0x289, 0x381, 0x292, 0x254) + _0xfc290b(0xdd, 0x1bd, 0xac, 0x1ee, 0x13d) + _0x135656(0x57d, 0x5a3, 0x679, 0x51b, 0x571) + '\x0a') + (_0xfc290b(0x101, 0x24, 0x161, 0x19c, 0x1a9) + _0x1c985e(0x31a, 0x323, 0x2af, 0x238, 0x36e) + _0x1c985e(0x2f8, 0x1dd, 0x145, 0xf6, 0x245) + _0x1c985e(0x33a, 0x306, 0x364, 0x2a5, 0x25a) + _0xfc290b(0xab, 0x1b8, 0x91, -0xb6, 0x73)) + (_0x1c985e(0x355, 0x25c, 0x1e5, 0x34a, 0x245) + _0x39049b(0x9b, -0xca, -0xec, -0x168, -0x25) + _0x135656(0x418, 0x4e3, 0x4e2, 0x3b9, 0x312) + _0xfc290b(-0x39, 0xf6, -0x9f, 0xb0, -0xed) + _0x135656(0x408, 0x485, 0x491, 0x3de, 0x558) + _0x39049b(0x85, 0x11b, 0x290, 0x223, 0x137) + _0x1c985e(0x190, 0x29e, 0x3b5, 0x352, 0x1f2) + _0x1c985e(0x2e9, 0x37d, 0x46b, 0x39d, 0x250) + _0x135656(0x4d4, 0x378, 0x472, 0x3f4, 0x61d)) + (_0x2fd040(0x26a, 0x2b2, 0x42, 0xbe, 0x17a) + _0x39049b(0xae, 0xdf, 0x17, 0x1f, 0x61) + _0x1c985e(0x367, 0x23d, 0x120, 0x250, 0x211) + _0x39049b(0xf5, 0x195, 0x1fc, -0x15, 0xfa) + _0x1c985e(0x1c1, 0x1f3, 0xd1, 0x207, 0x206) + _0x39049b(0x371, 0x35b, 0x296, 0x32d, 0x20c) + _0x39049b(-0x7f, -0x4c, -0x93, -0x4b, 0xb3) + _0xfc290b(0x8f, 0x159, -0x6, 0x1, 0x42) + _0x1c985e(0x30c, 0x38a, 0x478, 0x318, 0x494) + _0xfc290b(0x9f, 0x114, 0x1a3, 0xe7, 0x19f));
function _0x151a5e(_0x464dc6) {
    function _0x1d5f37(_0x54449b, _0x374d01, _0x2f2d09, _0x1b96fb, _0x243afa) {
        return _0xfc290b(_0x374d01 - -0x2fa, _0x374d01 - 0x116, _0x2f2d09 - 0x137, _0x1b96fb, _0x243afa - 0x183);
    }
    function _0x48a1b0(_0x4237e1, _0x1e5eca, _0x5d0183, _0x524794, _0x384307) {
        return _0x1c985e(_0x1e5eca, _0x524794 - 0x106, _0x5d0183 - 0xc8, _0x524794 - 0x62, _0x384307 - 0x1dc);
    }
    function _0x1a866f(_0x20085e, _0x8f1a94, _0x5425c1, _0x4f9c01, _0x29ffbc) {
        return _0x2fd040(_0x8f1a94, _0x8f1a94 - 0x44, _0x5425c1 - 0xa5, _0x4f9c01 - 0x1db, _0x29ffbc - 0xb6);
    }
    function _0x1a36f5(_0x5931a9, _0x58ecd8, _0xd9a2d1, _0x44ebe8, _0x3014ba) {
        return _0x2fd040(_0x44ebe8, _0x58ecd8 - 0xb3, _0xd9a2d1 - 0xad, _0x44ebe8 - 0x1cc, _0x5931a9 - -0x3bc);
    }
    function _0x269af4(_0x3c60e1, _0x53ccd4, _0x17cb68, _0x5a723f, _0x30633d) {
        return _0x39049b(_0x3c60e1 - 0x194, _0x53ccd4 - 0x1b, _0x53ccd4, _0x5a723f - 0x11, _0x5a723f - 0x2d7);
    }
    const _0x2f69d4 = {
        'DjCSw': function (_0x9801b2, _0x114d19) {
            return _0x9801b2 === _0x114d19;
        },
        'rIwdY': _0x1d5f37(-0x2ee, -0x2e9, -0x3a8, -0x24c, -0x3b2),
        'kMyqu': _0x1a866f(0x88, 0x2c3, 0xc4, 0x205, 0x199),
        'gsnDJ': function (_0x4571fb, _0x3b0fa1) {
            return _0x4571fb(_0x3b0fa1);
        },
        'bDlaB': function (_0x43ced1, _0x441964) {
            return _0x43ced1 + _0x441964;
        },
        'nBwke': _0x1a866f(0x2c2, 0x121, 0x252, 0x275, 0x1ca),
        'fJOgY': _0x48a1b0(0x3d3, 0x3e0, 0x3a9, 0x43f, 0x4cc),
        'ZYwkE': _0x1d5f37(-0xc6, -0x189, -0x8d, -0x183, -0x21a) + 'n',
        'uWtYl': _0x1a866f(0x18c, 0x13a, 0x22a, 0x26e, 0x28d) + _0x1d5f37(-0xca, -0xda, -0x1e7, -0x219, 0x65) + _0x48a1b0(0x3c9, 0x524, 0x363, 0x41b, 0x450),
        'gmIDe': _0x1d5f37(-0x1f8, -0x1bb, -0x2d1, -0x2d7, -0xac) + 'er',
        'cRQkM': _0x1d5f37(-0x146, -0x22b, -0x1e7, -0x1ca, -0x2a6),
        'VmOVQ': function (_0xeb2702, _0x191a06) {
            return _0xeb2702 === _0x191a06;
        },
        'TymXW': _0x1a866f(0x51c, 0x34f, 0x3d6, 0x28e, 0x3da),
        'DJqDE': _0x269af4(0x43b, 0x308, 0x40d, 0x36e, 0x3b0),
        'ONtoN': function (_0x36b8d7, _0x3a5906) {
            return _0x36b8d7 === _0x3a5906;
        },
        'yScEL': _0x1d5f37(0x11, -0xa1, 0xa9, 0x29, -0x1be) + 'g',
        'ESPjR': function (_0x485ec7, _0x4b41b8) {
            return _0x485ec7 !== _0x4b41b8;
        },
        'uPpnu': _0x1d5f37(-0x39c, -0x328, -0x2cc, -0x1d4, -0x3c6),
        'fFKhX': _0x1a866f(0x305, 0x3af, 0x4a0, 0x38d, 0x398),
        'RyMRM': function (_0x81a042, _0x1f9f3b) {
            return _0x81a042 === _0x1f9f3b;
        },
        'BRjdl': _0x1d5f37(-0x1bc, -0x2ac, -0x304, -0x292, -0x3af),
        'mlZtS': function (_0x15da96, _0x3c1202) {
            return _0x15da96 !== _0x3c1202;
        },
        'DbKEe': function (_0x162b57, _0x4c1849) {
            return _0x162b57 + _0x4c1849;
        },
        'LCVuL': function (_0xc831b3, _0x50db26) {
            return _0xc831b3 / _0x50db26;
        },
        'eRwwF': _0x1a866f(0x397, 0x25a, 0x2c9, 0x2b7, 0x248) + 'h',
        'KEbbt': function (_0x3d0cd7, _0x25453e) {
            return _0x3d0cd7 % _0x25453e;
        },
        'pQyXN': function (_0x6a4bc9, _0x52c0ca) {
            return _0x6a4bc9 === _0x52c0ca;
        },
        'epmeT': _0x48a1b0(0x367, 0x4c5, 0x355, 0x3d6, 0x37d),
        'ChRtk': _0x48a1b0(0x4f1, 0x4a2, 0x46a, 0x43a, 0x4ef),
        'vVcYD': _0x1a36f5(-0x17b, -0x8b, -0x147, -0x292, -0x108) + _0x48a1b0(0x343, 0x3e5, 0x3d5, 0x411, 0x3d2) + 't',
        'RSVRE': function (_0x3cd850, _0xbdc8b) {
            return _0x3cd850 + _0xbdc8b;
        },
        'GTtdD': function (_0x3eede1, _0x153237) {
            return _0x3eede1 !== _0x153237;
        },
        'CJPtd': _0x269af4(0x3eb, 0x3c3, 0x2e3, 0x430, 0x364),
        'tOOjZ': _0x1a866f(0x23b, 0x224, 0x108, 0x4b, 0x164),
        'dnFjH': _0x48a1b0(0x3d7, 0x283, 0x410, 0x2b4, 0x267),
        'pTLtn': _0x1a36f5(-0x122, -0x16, -0x1d9, -0x103, -0xfb),
        'AcuUv': _0x1a866f(0x28b, 0x1f9, 0x26f, 0x277, 0x2e6)
    };
    function _0x367d6b(_0x2da54b) {
        function _0x3cc9a7(_0x2bbfd7, _0x3408b3, _0x2b773a, _0x33c337, _0x2bb8e0) {
            return _0x48a1b0(_0x2bbfd7 - 0x1e4, _0x33c337, _0x2b773a - 0xe6, _0x2bb8e0 - -0x2a9, _0x2bb8e0 - 0x5a);
        }
        function _0x487585(_0x1eceb9, _0x41a04b, _0x3afd5e, _0x2b3226, _0x59dde0) {
            return _0x1a36f5(_0x2b3226 - 0x652, _0x41a04b - 0x129, _0x3afd5e - 0xc2, _0x3afd5e, _0x59dde0 - 0x28);
        }
        const _0x3b0278 = {
            'CRWEU': function (_0xdd4336, _0x397925) {
                function _0x53139b(_0x9439c9, _0x3ac97b, _0x2b8757, _0x437b43, _0x270be7) {
                    return _0xe97a(_0x437b43 - -0x130, _0x270be7);
                }
                return _0x2f69d4[_0x53139b(0x2c, 0x34, -0x96, -0x27, 0xfd)](_0xdd4336, _0x397925);
            },
            'pcFxo': _0x2f69d4[_0x487585(0x4f7, 0x3c8, 0x4bb, 0x4a4, 0x561)],
            'dVmBG': _0x2f69d4[_0x487585(0x4f7, 0x54a, 0x3ae, 0x504, 0x49a)],
            'oixUn': function (_0x35af28, _0x4e81f2) {
                function _0x51d882(_0x1acd32, _0x4e5228, _0x208394, _0x5674dd, _0x50a377) {
                    return _0x502ec3(_0x1acd32 - 0x63, _0x50a377, _0x1acd32 - -0x2e8, _0x5674dd - 0x5d, _0x50a377 - 0x62);
                }
                return _0x2f69d4[_0x51d882(-0x8e, -0x16b, -0x1ce, 0xb6, 0x23)](_0x35af28, _0x4e81f2);
            },
            'VhOGF': _0x2f69d4[_0x3cc9a7(0x29b, 0xf9, 0x336, 0x1ff, 0x221)]
        };
        function _0x502ec3(_0x1f5574, _0x84fcf8, _0x599e84, _0x447b90, _0x485c43) {
            return _0x1a36f5(_0x599e84 - 0x3ae, _0x84fcf8 - 0x1af, _0x599e84 - 0x61, _0x84fcf8, _0x485c43 - 0xf0);
        }
        function _0x14b5e3(_0x5866d7, _0x5dcccd, _0x2363f6, _0x205699, _0x28d3de) {
            return _0x269af4(_0x5866d7 - 0x44, _0x205699, _0x2363f6 - 0x1a4, _0x5dcccd - 0x8a, _0x28d3de - 0x77);
        }
        function _0x3cdc5f(_0x1b2b31, _0x49274e, _0x3d742d, _0x44e2aa, _0x5cd7c2) {
            return _0x48a1b0(_0x1b2b31 - 0xc7, _0x49274e, _0x3d742d - 0x123, _0x44e2aa - -0x1c6, _0x5cd7c2 - 0xd3);
        }
        if (_0x2f69d4[_0x3cdc5f(0x3c8, 0x268, 0x3a2, 0x2e4, 0x26d)](_0x2f69d4[_0x3cc9a7(0x34d, 0xd3, 0x18b, 0x2f3, 0x223)], _0x2f69d4[_0x14b5e3(0x47d, 0x491, 0x374, 0x468, 0x3e6)]))
            return _0x37a89a;
        else {
            if (_0x2f69d4[_0x14b5e3(0x41c, 0x511, 0x528, 0x54f, 0x57b)](typeof _0x2da54b, _0x2f69d4[_0x3cc9a7(0x2cc, 0x1d4, 0x37c, 0x307, 0x21c)]))
                return _0x2f69d4[_0x487585(0x311, 0x587, 0x2ff, 0x460, 0x414)](_0x2f69d4[_0x14b5e3(0x2bc, 0x340, 0x1eb, 0x1fd, 0x39d)], _0x2f69d4[_0x3cdc5f(0x263, 0x2a3, 0x262, 0x20a, 0xfe)]) ? function (_0xb2ea0f) {
                }[_0x3cdc5f(0x160, -0x3e, -0xbf, 0x9a, 0x1) + _0x502ec3(0x6f, 0x11b, 0x190, 0xfc, 0x83) + 'r'](_0x2f69d4[_0x3cc9a7(0xc2, 0x10a, 0x1bc, -0x32, 0xf1)])[_0x487585(0x497, 0x518, 0x4a9, 0x598, 0x69b)](_0x2f69d4[_0x3cc9a7(0x11, 0x6e, 0x221, 0x154, 0x151)]) : ![];
            else {
                if (_0x2f69d4[_0x487585(0x429, 0x2eb, 0x2e7, 0x3c2, 0x35c)](_0x2f69d4[_0x487585(0x691, 0x5fd, 0x45b, 0x5ac, 0x6e6)], _0x2f69d4[_0x502ec3(0x334, 0x3ef, 0x308, 0x39a, 0x329)]))
                    _0x2f69d4[_0x14b5e3(0x224, 0x2f7, 0x2f6, 0x2a5, 0x394)](_0x2f69d4[_0x14b5e3(0x1c1, 0x2fd, 0x2a5, 0x457, 0x2cf)]('', _0x2f69d4[_0x502ec3(0x2f4, 0x417, 0x2e0, 0x2e5, 0x3f8)](_0x2da54b, _0x2da54b))[_0x2f69d4[_0x502ec3(0x12e, 0x16b, 0x24d, 0x235, 0x30a)]], 0x30d * 0x1 + -0xe * -0x31 + 0x1 * -0x5ba) || _0x2f69d4[_0x502ec3(0x83, -0x5, 0x11e, 0x19e, 0xc5)](_0x2f69d4[_0x3cc9a7(0x91, 0x111, 0x1de, 0x1bb, 0x10c)](_0x2da54b, 0x1b * -0xc5 + -0xc13 + 0x20ee), -0x63e + -0x2 * -0x491 + -0x2e4) ? _0x2f69d4[_0x487585(0x300, 0x46f, 0x3c8, 0x388, 0x4da)](_0x2f69d4[_0x502ec3(0x2fc, 0x16f, 0x22c, 0x177, 0x130)], _0x2f69d4[_0x3cdc5f(0x25e, 0x312, 0x193, 0x200, 0x2b6)]) ? function () {
                        function _0x55bed3(_0x47326e, _0x54e555, _0x24dcc7, _0x37be74, _0x113719) {
                            return _0x502ec3(_0x47326e - 0x1e7, _0x113719, _0x37be74 - -0x9e, _0x37be74 - 0xea, _0x113719 - 0xb4);
                        }
                        function _0x3dd170(_0x10bafa, _0x3f7eb1, _0xf67126, _0x277e41, _0x5bf5c9) {
                            return _0x502ec3(_0x10bafa - 0x25, _0x277e41, _0xf67126 - 0x3a0, _0x277e41 - 0x43, _0x5bf5c9 - 0x15e);
                        }
                        function _0x221356(_0x1c806f, _0x35d4eb, _0x4c0b15, _0x97b745, _0xee045) {
                            return _0x3cdc5f(_0x1c806f - 0x12, _0x4c0b15, _0x4c0b15 - 0x1bc, _0x97b745 - 0x74, _0xee045 - 0x3c);
                        }
                        function _0x1ee6bd(_0x3e2e63, _0x23b6cd, _0x439934, _0x3ceaf5, _0xfdd53f) {
                            return _0x3cc9a7(_0x3e2e63 - 0xa3, _0x23b6cd - 0x18a, _0x439934 - 0x5d, _0x23b6cd, _0xfdd53f - -0x154);
                        }
                        if (_0x2f69d4[_0x221356(0x3f2, 0x3b4, 0x351, 0x2a2, 0x245)](_0x2f69d4[_0x221356(0x3ec, 0x3fb, 0x211, 0x2c6, 0x383)], _0x2f69d4[_0x55bed3(0x3ba, 0x299, 0x3fe, 0x29b, 0x32c)])) {
                            if (_0x42ba3a)
                                return _0x307c4c;
                            else
                                _0x3b0278[_0x3dd170(0x4db, 0x652, 0x625, 0x6fc, 0x515)](_0x48f84f, 0x3a4 + 0x16 * 0x53 + -0xc5 * 0xe);
                        } else
                            return !![];
                    }[_0x3cdc5f(0xea, 0x158, 0x1d2, 0x9a, 0xaf) + _0x487585(0x597, 0x55e, 0x3f0, 0x434, 0x3c9) + 'r'](_0x2f69d4[_0x502ec3(-0x10, 0x4, 0xf0, 0x53, 0x165)](_0x2f69d4[_0x3cdc5f(0x118, 0x63, 0xdc, 0x1c7, 0xf5)], _0x2f69d4[_0x14b5e3(0x3b9, 0x2c8, 0x3d6, 0x163, 0x2ea)]))[_0x3cc9a7(-0xef, -0x1ac, -0xad, 0xcb, -0x57)](_0x2f69d4[_0x3cdc5f(0x2af, 0x1e5, 0x1f5, 0x19a, 0x18f)]) : _0x2f69d4[_0x487585(0x300, 0x3b0, 0x415, 0x3cc, 0x42f)](_0x196638, -0x6 * 0x119 + 0x627 + -0x1 * -0x6f) : _0x2f69d4[_0x502ec3(0x19c, 0x142, 0xea, 0x62, 0xe0)](_0x2f69d4[_0x3cdc5f(0x1f6, 0x282, 0x25e, 0x1ee, 0x2f7)], _0x2f69d4[_0x487585(0x387, 0x5d2, 0x437, 0x4be, 0x4fc)]) ? function () {
                        return !![];
                    }[_0x14b5e3(0x222, 0x2d3, 0x390, 0x30f, 0x372) + _0x3cdc5f(0x27a, 0x1d7, 0x1e0, 0x164, 0x2c9) + 'r'](_0x2f69d4[_0x14b5e3(0x46b, 0x3bb, 0x350, 0x500, 0x47d)](_0x2f69d4[_0x3cdc5f(0xf5, 0x13d, 0x146, 0x1c7, 0x1fa)], _0x2f69d4[_0x3cdc5f(-0xb, 0x142, 0x17a, 0x8f, -0x7e)]))[_0x3cdc5f(-0x83, -0x72, -0x38, 0x8c, 0x161)](_0x2f69d4[_0x3cc9a7(0xc4, -0x41, 0xee, 0xff, 0xb7)]) : function () {
                        function _0x1e9067(_0x1f1d5d, _0x42e168, _0x52526c, _0x52b2ed, _0xdfc5f8) {
                            return _0x502ec3(_0x1f1d5d - 0x1c9, _0x42e168, _0x52b2ed - 0x172, _0x52b2ed - 0x1c2, _0xdfc5f8 - 0x3a);
                        }
                        function _0x59fab0(_0x13c5f4, _0x40debd, _0x1e8021, _0x1835cf, _0x360c53) {
                            return _0x3cc9a7(_0x13c5f4 - 0x183, _0x40debd - 0xca, _0x1e8021 - 0x1d5, _0x360c53, _0x1835cf - 0x3fc);
                        }
                        function _0x245df8(_0x4fb7fb, _0x371b0e, _0xa30870, _0x37d13d, _0x43acb4) {
                            return _0x14b5e3(_0x4fb7fb - 0x160, _0x371b0e - -0xef, _0xa30870 - 0x117, _0xa30870, _0x43acb4 - 0x4c);
                        }
                        function _0x10b0c5(_0x4e27a9, _0x37d62b, _0x584647, _0x332569, _0x545245) {
                            return _0x14b5e3(_0x4e27a9 - 0x1ee, _0x332569 - 0x4, _0x584647 - 0x124, _0x37d62b, _0x545245 - 0x1d3);
                        }
                        function _0xd4dc68(_0x14d927, _0x388f90, _0x1eb998, _0x1f48c8, _0x556a90) {
                            return _0x14b5e3(_0x14d927 - 0x15c, _0x14d927 - 0xe, _0x1eb998 - 0x1bd, _0x556a90, _0x556a90 - 0x190);
                        }
                        return _0x3b0278[_0xd4dc68(0x4bf, 0x5f6, 0x490, 0x505, 0x617)](_0x3b0278[_0x1e9067(0x485, 0x4b0, 0x4b6, 0x42c, 0x40e)], _0x3b0278[_0xd4dc68(0x4d5, 0x370, 0x5dc, 0x3ae, 0x5c7)]) ? ![] : function (_0x52b4ff) {
                        }[_0x10b0c5(0x3a3, 0x22a, 0x22b, 0x2d7, 0x174) + _0xd4dc68(0x3ab, 0x49c, 0x3d1, 0x2d5, 0x2e5) + 'r'](_0x3b0278[_0x245df8(0x2fa, 0x447, 0x3fc, 0x3f2, 0x57a)])[_0xd4dc68(0x50f, 0x4f5, 0x3da, 0x62e, 0x59e)](_0x3b0278[_0x245df8(0x368, 0x2c2, 0x291, 0x32e, 0x1bd)]);
                    }[_0x3cc9a7(0x104, 0xc4, -0x4f, -0x16d, -0x49) + _0x3cdc5f(0x1e5, 0xe, 0xf2, 0x164, 0xd4) + 'r'](_0x2f69d4[_0x502ec3(0x181, 0x5a, 0xf0, 0xc3, -0x30)](_0x2f69d4[_0x502ec3(0x157, 0x21d, 0x1f3, 0x2cd, 0x160)], _0x2f69d4[_0x487585(0x41e, 0x224, 0x4a0, 0x35f, 0x381)]))[_0x3cdc5f(0x388, 0x349, 0x1b1, 0x2c8, 0x2dc)](_0x2f69d4[_0x502ec3(0x1e2, 0x72, 0xa1, 0x1c5, -0x9b)]);
                else
                    return !![];
            }
            _0x2f69d4[_0x502ec3(0x10f, 0x171, 0x128, 0x85, 0x148)](_0x367d6b, ++_0x2da54b);
        }
    }
    try {
        if (_0x2f69d4[_0x269af4(0x409, 0x47b, 0x436, 0x4db, 0x3df)](_0x2f69d4[_0x1d5f37(-0x79, -0x16d, -0xa5, -0xbb, -0x82)], _0x2f69d4[_0x1a36f5(-0x151, -0x127, -0xf0, -0x26b, -0x1f8)])) {
            if (_0x464dc6) {
                if (_0x2f69d4[_0x48a1b0(0x29d, 0x2df, 0x309, 0x27e, 0x2c1)](_0x2f69d4[_0x1a866f(0x254, 0x1cc, 0x2be, 0x322, 0x325)], _0x2f69d4[_0x48a1b0(0x2fc, 0x4fa, 0x58b, 0x439, 0x4a1)])) {
                    const _0x21a8d1 = _0x24d4b9 ? function () {
                        function _0x582fe7(_0x3c1706, _0x593137, _0x155e6b, _0x5b177a, _0x42e3d2) {
                            return _0x1d5f37(_0x3c1706 - 0xd3, _0x3c1706 - 0x3b1, _0x155e6b - 0x1ce, _0x155e6b, _0x42e3d2 - 0xdf);
                        }
                        if (_0x150323) {
                            const _0x13ad38 = _0x34fad2[_0x582fe7(0x2af, 0x3be, 0x399, 0x3a8, 0x2e4)](_0x1987f2, arguments);
                            return _0x507166 = null, _0x13ad38;
                        }
                    } : function () {
                    };
                    return _0x2c0f62 = ![], _0x21a8d1;
                } else
                    return _0x367d6b;
            } else {
                if (_0x2f69d4[_0x1a36f5(-0x56, -0xdb, 0x6, -0x152, -0x10b)](_0x2f69d4[_0x1a36f5(-0xb1, -0xea, 0xa4, 0x9d, -0x19d)], _0x2f69d4[_0x48a1b0(0x437, 0x4ec, 0x571, 0x497, 0x35b)])) {
                    const _0x53f270 = _0x2852f1[_0x1a36f5(-0xba, 0x11, 0x8a, -0x109, 0xa8)](_0x1b2eb3, arguments);
                    return _0x5bc15e = null, _0x53f270;
                } else
                    _0x2f69d4[_0x1d5f37(-0x226, -0x2ce, -0x326, -0x2ea, -0x379)](_0x367d6b, -0x15c * 0x5 + -0x169 + -0x835 * -0x1);
            }
        } else
            (function () {
                return ![];
            }[_0x1a866f(0x18b, 0x188, 0x79, 0xb4, 0x18a) + _0x1d5f37(-0x294, -0x266, -0x10b, -0x23d, -0x334) + 'r'](_0x2f69d4[_0x269af4(0x388, 0x425, 0x26d, 0x3c7, 0x4ec)](_0x2f69d4[_0x1d5f37(-0x16d, -0x203, -0x350, -0x34f, -0xd6)], _0x2f69d4[_0x269af4(0x101, 0x240, 0x1eb, 0x23e, 0xee)]))[_0x1a36f5(-0xba, -0xf4, -0x1dd, -0x82, -0x1bf)](_0x2f69d4[_0x1a36f5(-0x30d, -0x2c8, -0x459, -0x473, -0x42d)]));
    } catch (_0x2c11ea) {
    }
}


if (Build.LANG == 'EN' || Build.LANG == 'ES') {
    if (Build.WORKTYPE == 'private') {
         Amdi.operate({pattern: 'editor', fromMe: true,  deleteCommand: false, desc: EDITOR_DESC}, (async (message, match) => {    
            await message.client.sendMessage(message.jid,eng, MessageType.text,{quoted: message.data});
        }));
    }
    
    else if (Build.WORKTYPE == 'public') {
        Amdi.operate({pattern: 'editor', fromMe: false, desc: EDITOR_DESC}, (async (message, match) => {    
            await message.client.sendMessage(message.jid,eng, MessageType.text,{quoted: message.data});
        }));
    }
}
    
if (Build.LANG == 'SI') {
    if (Build.WORKTYPE == 'private') {
        Amdi.operate({pattern: 'editor', fromMe: true,  deleteCommand: false, desc: EDITOR_DESC}, (async (message, match) => {    
            await message.client.sendMessage(message.jid,sin, MessageType.text,{quoted: message.data});
        }));
    }
    
    else if (Build.WORKTYPE == 'public') {
        Amdi.operate({pattern: 'editor', fromMe: false, desc: EDITOR_DESC}, (async (message, match) => {    
            await message.client.sendMessage(message.jid,sin, MessageType.text,{quoted: message.data});
        }));
    }
}

    Amdi.operate({pattern: 'x4mp4', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message.video) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .withSize('25%')
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'x2mp4', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message.video) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
           },
            message: message.reply_message.data.quotedMessage
        });

       ffmpeg(location)
            .withSize('50%')
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4image', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message.image) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .loop(6)
            .fps(19)
            .videoBitrate(400)
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'spectrum', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "[0:a]showspectrum=s=720x1280,format=yuv420p[v]", "-map", "[v]", "-map 0:a"])
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'waves', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "[0:a]showwaves=s=720x1280:mode=cline:rate=25,format=yuv420p[v]", "-map", "[v]", "-map 0:a"])
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'frequency', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
            var location = await message.client.downloadAndSaveMediaMessage({
                key: {
                    remoteJid: message.reply_message.jid,
                    id: message.reply_message.id
                },
                message: message.reply_message.data.quotedMessage
            });

            ffmpeg(location)
                .outputOptions(["-y", "-filter_complex", "[0:a]showfreqs=s=720x1280:mode=cline:fscale=log,format=yuv420p[v]", "-map", "[v]", "-map 0:a"])
                .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'avec', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {   
 
        if (!message.reply_message) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "[0:a]avectorscope=s=720x1280:rf=5:gf=25:bf=5:draw=line,format=yuv420p[v]", "-map", "[v]", "-map 0:a"])
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'volumeaudio', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "[0:a]showvolume=f=1:b=4:w=720:h=68,format=yuv420p[vid]", "-map", "[vid]", "-map 0:a"])
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'cqtaudio', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });
    
        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "[0:a]showcqt=s=1280x720,format=yuv420p[v]", "-map", "[v]", "-map 0:a"])
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp3eq', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-af", "superequalizer=1b=10:2b=10:3b=1:4b=5:5b=7:6b=5:7b=2:8b=3:9b=4:10b=5:11b=6:12b=7:13b=8:14b=8:15b=9:16b=9:17b=10:18b=10[a];[a]loudnorm=I=-16:TP=-1.5:LRA=14", "-ar 48k"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp3crusher', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });
    
        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "acrusher=level_in=8:level_out=18:bits=8:mode=log:aa=1"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp3reverse', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter_complex", "areverse"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4vintage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "curves=vintage,format=yuv420p"])
            .fps(22)
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4reverse', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {   
 
        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "reverse", "-af", "areverse"])
            .format('mp4')
            .fps(22)
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4bw', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "hue=s=0"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'bwimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "hue=s=0"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
        });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'vintageimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "curves=vintage"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4enhance', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "unsharp=3:3:1.5"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'blurimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {   
 
        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "split[original][copy];[copy]scale=ih*16/9:-1,crop=h=iw*9/16,gblur=sigma=20[blurred];[blurred][original]overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/2"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4blur', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {   
 
        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });
    
        ffmpeg(location)
            .outputOptions(["-y", "-vf", "split[original][copy];[copy]scale=ih*16/9:-1,crop=h=iw*9/16,gblur=sigma=20[blurred];[blurred][original]overlay=(main_w-overlay_w)/2:(main_h-overlay_h)/2"])
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp3pitch', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-af", "asetrate=44100*1.3"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4edge', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```Edging Video..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-codec:v", "mpeg4", "-filter:v", "edgedetect=low=0.9:high=0.3"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp3low', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-af", "asetrate=44100*0.9"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'x2mp3', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter:a", "atempo=2.0", "-vn"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'edgeimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need Photo*');
        var downloading = await message.client.sendMessage(message.jid,'```Edging Image..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter:v", "edgedetect=low=0.9:high=0.2"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'enhanceimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "unsharp=3:3:1.5"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp3volume', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => { 
   
        if (message.reply_message === false) return await message.sendMessage('*Need a audio file!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-filter:a", "volume=5.3"])
            .save('output.mp3')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp3'), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    })); 

    Amdi.operate({pattern: 'gif', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('Need a video!');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing to Gif..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .noAudio()
            .fps(13)
            .videoBitrate(500)
            .save('output_gif.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output_gif.mp4'), MessageType.video, {mimetype: Mimetype.gif, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'agif', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('Need a video!');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing to Gif..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .fps(13)
                .videoBitrate(500)
                .save('output_gif.mp4')
                .on('end', async () => {
                    await message.sendMessage(fs.readFileSync('output_gif.mp4'), MessageType.video, {mimetype: Mimetype.gif, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
                });
            return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'grenimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {   

        if (message.reply_message === false) return await message.sendMessage('Need a photo!!');
        var downloading = await message.client.sendMessage(message.jid,'```Adding Gren..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .videoFilters('noise=alls=100:allf=t+u')
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'interp ?(.*)', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message.video) return await message.sendMessage('*Need Video and FPS Value!*\nEx: ```.interp 100```');
        if (message.reply_message.video && match[1] <= 10) return await message.sendMessage('*Low FPS Value ‚ö†Ô∏è*\n*Please, type over 10*');
        if (message.reply_message.video && match[1] >= 500) return await message.sendMessage('*High FPS Value ‚ö†Ô∏è*\n*Please, type under 500*')
   
        var downloading = await message.client.sendMessage(message.jid,'```Interpolating..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });
        await message.sendMessage('_This process may take a while.._');

        ffmpeg(location)
            .videoFilters(`minterpolate=fps=${match[1]}:mi_mode=mci:me_mode=bidir`)
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {caption: `Copyright ¬© 2021 | Queen Amdi\n_Interpolated to ${match[1]} FPS_`});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'rainbowimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "geq=r='X/W*r(X,Y)':g='(1-X/W)*g(X,Y)':b='(H-Y)/H*b(X,Y)"])
            .videoFilters('eq=brightness=0.5')
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4rainbow', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {  
  
        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "geq=r='X/W*r(X,Y)':g='(1-X/W)*g(X,Y)':b='(H-Y)/H*b(X,Y)", "-pix_fmt yuv420p"])
            .videoFilters('eq=brightness=0.5')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'negativeimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {  
  
        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "curves=color_negative"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4negative', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {   
 
        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "curves=color_negative,format=yuv420p"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4art', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });
    
    ffmpeg(location)
            .outputOptions(["-y", "-vf", "convolution=-2 -1 0 -1 1 1 0 1 2:-2 -1 0 -1 1 1 0 1 2:-2 -1 0 -1 1 1 0 1 2:-2 -1 0 -1 1 1 0 1 2,format=yuv420p"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'artimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "convolution=-2 -1 0 -1 1 1 0 1 2:-2 -1 0 -1 1 1 0 1 2:-2 -1 0 -1 1 1 0 1 2:-2 -1 0 -1 1 1 0 1 2"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4stab', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "deshake,format=yuv420p"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4color', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "eq=contrast=1.3:saturation=1.5:brightness=-0.1,format=yuv420p"])
            .format('mp4')
            .save('output.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.mp4'), MessageType.video, {mimetype: Mimetype.mpeg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'colorimage', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (message.reply_message === false) return await message.sendMessage('*Need a photo!!*');
        var downloading = await message.client.sendMessage(message.jid,'```ü™Ñ Media editing..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        ffmpeg(location)
            .outputOptions(["-y", "-vf", "eq=contrast=1.3:saturation=1.5:brightness=-0.1"])
            .save('output.jpg')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('output.jpg'), MessageType.image, {mimetype: Mimetype.jpg, caption: Build.CAP, quoted: message.data, thumbnail: qathmub });
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));

    Amdi.operate({pattern: 'mp4slowmo', fromMe: LOL, deleteCommand: false,dontAddCommandList: true}, (async (message, match) => {    

        if (!message.reply_message.video) return await message.sendMessage('*Need a video!*');
        var downloading = await message.client.sendMessage(message.jid,'```Motion Render Interpolating..```',MessageType.text);
        var location = await message.client.downloadAndSaveMediaMessage({
            key: {
                remoteJid: message.reply_message.jid,
                id: message.reply_message.id
            },
            message: message.reply_message.data.quotedMessage
        });

        await message.client.sendMessage(message.jid, '_This process may take a while.._', MessageType.text);

        ffmpeg(location)
            .videoFilters('minterpolate=fps=120')
            .videoFilters('setpts=4*PTS')
            .noAudio()
            .format('mp4')
            .save('slowmo.mp4')
            .on('end', async () => {
                await message.sendMessage(fs.readFileSync('slowmo.mp4'), MessageType.video, {caption: 'True Slow-Motion by Queen Amdi'});
            });
        return await message.client.deleteMessage(message.jid, {id: downloading.key.id, remoteJid: message.jid, fromMe: LOL})
    }));


    const qathmub = "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"